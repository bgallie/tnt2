// tnt2 project main.go
// tnt2 is an implementation of the "Infinite Key Ecryption" system from the
// Dr. Dobbs Journal artical.

package main

import (
	"bufio"
	"encoding/ascii85"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"log"
	"math/big"
	"os"
	"os/user"
	"sync"

	"github.com/bgallie/filters"
	"github.com/bgallie/tnt2/cryptors"
	"github.com/bgallie/tnt2/cryptors/permutator"
	"github.com/bgallie/tnt2/cryptors/rotor"
	"github.com/bgallie/uberJc1"
	"github.com/bgallie/utilities"
)

const (
	Tnt2Comment   = "TNT2 Encrypted Data"
	Tnt2Name      = "os.Stdin"
	Tnt2CountFile = ".tnt2"
	usage         = "tnt2 [[-decode | -d] | [-encode | -e]] <inputfile >outputfile"
)

var (
	encode          bool // Flag: True to encode, False to decode
	decode          bool // Flag: True to decode, False to encode
	rotor1          *rotor.Rotor
	rotor2          *rotor.Rotor
	rotor3          *rotor.Rotor
	rotor4          *rotor.Rotor
	rotor5          *rotor.Rotor
	rotor6          *rotor.Rotor
	permutator1     *permutator.Permutator
	permutator2     *permutator.Permutator
	counter         *cryptors.Counter = new(cryptors.Counter)
	proFormaMachine []cryptors.Crypter
	tntMachine      []cryptors.Crypter
	rotorSizes      []int
	rotorSizesIndex int
	cycleSizes      []int
	cycleSizesIndex int
	key             *uberJc1.Jc1
	mKey            string
	iCnt            *big.Int
	cMap            map[string]*big.Int
	logIt           bool
	nullFile        *os.File
	cntrFileName    string
	un              = utilities.Un
	trace           = utilities.Trace
	deferClose      = utilities.DeferClose
	checkFatal      = utilities.CheckFatal
	turnOffLogging  = utilities.TurnOffLogging
	turnOnLogging   = utilities.TurnOnLogging
)

func init() {
	// Parse the command line arguments.
	var cnt string
	flag.StringVar(&cnt, "count", "0", "initial count")
	flag.StringVar(&cnt, "c", "0", "initial count (shorthand)")
	flag.BoolVar(&encode, "encode", false, "encrypt data")
	flag.BoolVar(&encode, "e", false, "encrypt data (shorthand)")
	flag.BoolVar(&decode, "decode", false, "decrypt data")
	flag.BoolVar(&decode, "d", false, "decrypt data (shorthand)")
	flag.BoolVar(&logIt, "log", false, "turn logging on")
	flag.BoolVar(&logIt, "l", false, "turn logging on (shorthand)")
	flag.Parse()

	if (encode && decode) || !(encode || decode) {
		log.Println("You must select one of -encode or -decode")
		log.Println(usage)
		flag.PrintDefaults()
		os.Exit(1)
	}

	if flag.NArg() == 0 {
		secret, exists := os.LookupEnv("tnt2Secret")
		if exists {
			key = uberJc1.New([]byte(secret))
		} else {
			log.Fatalln("You must supply a password.")
		}
	} else {
		key = uberJc1.New([]byte(flag.Arg(0)))
	}

	if !logIt {
		turnOffLogging()
	}
	log.Println("Getting current user info.")
	u, err := user.Current()
	checkFatal(err)
	cntrFileName = fmt.Sprintf("%s%c%s", u.HomeDir, os.PathSeparator, Tnt2CountFile)
	log.Printf("tnt2 counter file name: %s\n", cntrFileName)
	// Get a 'checksum' of the encryption key.  This is used as a key to store
	// the number of blocks encrypted during the last session.
	var cksum [cryptors.CypherBlockBytes]byte
	var eCksum [int((cryptors.CypherBlockBytes / 4.0) * 5)]byte
	aLen := ascii85.Encode(eCksum[:], key.XORKeyStream(cksum[:]))
	log.Printf("MaxEncodedLen: %d  aLen: %d\n", ascii85.MaxEncodedLen(cryptors.CypherBlockBytes), aLen)
	mKey = string(eCksum[:])
	// Read in the map of counts from the file which holds the counts and get the count to use to encode the file.
	cMap = make(map[string]*big.Int)
	cMap = readCounterFile(cMap)

	if cMap[mKey] == nil {
		iCnt, _ = new(big.Int).SetString(cnt, 10)
		cMap[mKey] = iCnt
	} else {
		iCnt = cMap[mKey]
	}

	log.Printf("Read map file: %v\nCounter: %s\n", cMap, iCnt)
	// Define a random order of rotor sizes based on the key.
	rotorSizes = key.Perm(len(cryptors.RotorSizes))
	// Define a random order of cycle sipzes based on the key.
	cycleSizes = key.Perm(len(cryptors.CycleSizes))
	// Create the proforma rotors and permentators used to create the actual rotors and permentators to use.
	rotor1 = rotor.New(8191, 6012, 1504, &[...]byte{
		7, 55, 39, 10, 15, 208, 107, 93, 105, 204, 102, 157, 150, 211, 186, 28,
		218, 187, 115, 214, 83, 26, 57, 236, 234, 51, 102, 193, 83, 213, 74, 116,
		195, 125, 113, 134, 26, 163, 114, 126, 229, 152, 172, 185, 216, 95, 203, 119,
		46, 158, 203, 224, 13, 181, 63, 219, 54, 73, 5, 114, 113, 217, 255, 66,
		11, 160, 22, 3, 20, 212, 76, 246, 16, 159, 219, 165, 31, 45, 62, 120,
		44, 232, 64, 79, 197, 135, 126, 248, 64, 124, 26, 82, 136, 231, 210, 40,
		232, 147, 160, 5, 104, 174, 61, 128, 193, 181, 83, 36, 46, 19, 251, 138,
		231, 100, 219, 173, 69, 142, 194, 230, 135, 68, 125, 40, 40, 215, 219, 35,
		180, 91, 188, 157, 163, 50, 119, 124, 245, 158, 191, 81, 120, 254, 120, 154,
		167, 158, 209, 179, 41, 78, 169, 183, 1, 149, 196, 230, 70, 22, 219, 50,
		233, 195, 196, 79, 79, 203, 6, 154, 108, 253, 164, 79, 15, 219, 170, 3,
		5, 196, 91, 115, 164, 207, 7, 243, 214, 204, 243, 156, 160, 63, 206, 142,
		156, 118, 220, 2, 92, 72, 58, 120, 45, 94, 227, 165, 74, 99, 59, 215,
		253, 237, 73, 89, 205, 31, 68, 213, 223, 169, 21, 59, 155, 216, 237, 25,
		214, 44, 168, 169, 10, 174, 240, 133, 115, 57, 124, 121, 82, 99, 47, 51,
		6, 67, 115, 89, 162, 161, 142, 98, 141, 137, 75, 233, 197, 193, 220, 41,
		224, 239, 117, 13, 205, 131, 40, 21, 172, 105, 159, 126, 66, 97, 15, 128,
		20, 22, 203, 216, 169, 114, 213, 210, 192, 87, 103, 161, 169, 178, 191, 203,
		87, 49, 64, 122, 10, 42, 72, 188, 95, 109, 245, 137, 138, 118, 219, 31,
		10, 80, 204, 90, 207, 108, 46, 3, 210, 71, 163, 162, 154, 231, 86, 154,
		205, 110, 20, 85, 250, 140, 210, 242, 248, 193, 192, 28, 81, 161, 28, 235,
		220, 128, 119, 195, 14, 87, 137, 221, 6, 246, 161, 38, 27, 164, 97, 178,
		92, 91, 138, 223, 112, 51, 119, 128, 50, 193, 77, 116, 145, 178, 145, 252,
		122, 72, 185, 19, 109, 194, 39, 246, 110, 19, 68, 92, 145, 126, 84, 178,
		212, 214, 47, 201, 224, 75, 196, 208, 110, 63, 88, 34, 234, 240, 234, 192,
		147, 245, 243, 198, 127, 62, 162, 77, 13, 206, 7, 230, 130, 234, 114, 214,
		159, 247, 129, 227, 186, 187, 22, 206, 27, 36, 15, 233, 123, 138, 239, 146,
		116, 38, 178, 43, 196, 198, 189, 57, 81, 61, 65, 34, 136, 178, 244, 81,
		139, 222, 232, 253, 7, 78, 44, 196, 170, 52, 104, 2, 112, 175, 152, 182,
		125, 53, 253, 76, 118, 135, 203, 241, 253, 200, 82, 127, 59, 189, 245, 231,
		99, 210, 157, 193, 176, 6, 115, 168, 125, 125, 144, 57, 27, 164, 204, 105,
		202, 148, 33, 153, 47, 103, 115, 223, 70, 121, 241, 187, 25, 63, 194, 243,
		139, 213, 178, 105, 197, 177, 94, 47, 70, 156, 146, 163, 183, 180, 115, 151,
		18, 126, 229, 161, 170, 253, 154, 210, 25, 147, 130, 157, 246, 55, 64, 126,
		148, 12, 100, 231, 89, 12, 109, 87, 98, 0, 252, 188, 103, 236, 91, 132,
		228, 232, 15, 66, 126, 230, 28, 242, 105, 202, 247, 137, 111, 208, 247, 21,
		27, 50, 110, 182, 27, 71, 69, 248, 5, 238, 33, 68, 44, 145, 127, 254,
		218, 30, 17, 0, 66, 38, 103, 143, 96, 64, 23, 149, 7, 138, 117, 2,
		89, 24, 225, 175, 26, 182, 68, 201, 162, 221, 79, 146, 169, 111, 112, 77,
		140, 201, 252, 14, 185, 203, 153, 197, 142, 188, 238, 57, 151, 158, 141, 221,
		76, 212, 179, 6, 226, 86, 71, 56, 42, 151, 213, 88, 127, 189, 151, 80,
		11, 6, 145, 25, 195, 234, 124, 196, 15, 117, 251, 83, 148, 63, 131, 125,
		40, 213, 170, 219, 185, 76, 42, 104, 201, 127, 141, 98, 199, 48, 86, 169,
		29, 38, 106, 235, 10, 111, 255, 22, 149, 49, 179, 178, 254, 234, 32, 197,
		48, 57, 216, 193, 137, 158, 42, 251, 183, 187, 194, 103, 67, 174, 233, 70,
		2, 184, 153, 224, 74, 102, 253, 185, 110, 26, 3, 239, 241, 207, 129, 214,
		51, 226, 95, 227, 226, 45, 64, 148, 173, 231, 15, 44, 211, 43, 248, 112,
		234, 251, 36, 131, 153, 6, 205, 232, 19, 50, 180, 53, 79, 78, 59, 216,
		176, 52, 30, 213, 170, 211, 107, 67, 230, 136, 211, 216, 1, 153, 115, 82,
		166, 22, 117, 186, 159, 183, 67, 60, 168, 167, 129, 225, 119, 60, 6, 11,
		159, 74, 153, 59, 134, 20, 224, 130, 238, 149, 138, 10, 192, 128, 140, 182,
		172, 134, 210, 9, 123, 113, 54, 186, 174, 148, 208, 108, 184, 247, 79, 25,
		211, 245, 146, 31, 37, 135, 94, 36, 90, 60, 59, 51, 91, 248, 211, 100,
		102, 90, 48, 207, 86, 97, 55, 107, 188, 202, 222, 42, 197, 146, 242, 208,
		67, 246, 200, 129, 244, 242, 111, 88, 124, 29, 221, 223, 45, 156, 118, 39,
		251, 210, 68, 54, 105, 103, 202, 220, 236, 67, 194, 187, 77, 19, 14, 22,
		0, 90, 56, 179, 195, 4, 73, 217, 139, 148, 203, 57, 48, 186, 34, 252,
		86, 77, 66, 21, 4, 234, 43, 24, 8, 55, 80, 57, 49, 216, 36, 16,
		235, 190, 195, 87, 23, 236, 183, 176, 143, 237, 43, 220, 1, 139, 216, 45,
		173, 54, 109, 176, 168, 128, 104, 180, 223, 139, 244, 90, 132, 41, 176, 132,
		153, 145, 255, 64, 225, 85, 174, 71, 55, 246, 140, 82, 79, 179, 93, 250,
		212, 125, 240, 48, 253, 12, 217, 39, 237, 207, 100, 252, 25, 244, 139, 119,
		25, 160, 236, 203, 219, 49, 20, 55, 195, 35, 100, 236, 178, 101, 203, 61,
		145, 254, 16, 207, 139, 110, 218, 49, 140, 12, 225, 211, 154, 117, 188, 182,
		131, 155, 19, 133, 7, 232, 181, 174, 52, 102, 179, 78, 203, 105, 93, 14,
		237, 221, 57, 235, 41, 141, 28, 118, 245, 25, 179, 224, 169, 106, 37, 58})
	rotor2 = rotor.New(8179, 7429, 4312, &[...]byte{
		207, 80, 120, 11, 43, 244, 191, 9, 72, 178, 94, 220, 132, 42, 226, 132,
		68, 153, 0, 227, 89, 124, 81, 9, 242, 105, 65, 183, 199, 57, 9, 109,
		252, 151, 132, 139, 32, 85, 217, 63, 6, 159, 253, 148, 50, 78, 189, 214,
		62, 73, 161, 109, 177, 88, 239, 101, 171, 237, 13, 41, 99, 38, 86, 62,
		56, 69, 9, 203, 200, 169, 182, 156, 121, 45, 167, 162, 71, 45, 126, 167,
		135, 205, 178, 27, 239, 255, 193, 111, 157, 21, 111, 140, 249, 42, 244, 237,
		184, 200, 4, 73, 52, 183, 170, 132, 94, 48, 47, 171, 254, 53, 80, 162,
		76, 82, 239, 26, 174, 253, 11, 45, 22, 36, 93, 136, 20, 8, 60, 18,
		103, 243, 204, 146, 159, 134, 205, 58, 170, 61, 89, 170, 184, 48, 95, 16,
		166, 253, 92, 32, 91, 20, 254, 42, 44, 57, 111, 146, 67, 79, 201, 86,
		44, 121, 28, 188, 165, 44, 178, 77, 94, 95, 215, 196, 177, 154, 78, 121,
		252, 78, 16, 15, 245, 114, 155, 120, 184, 105, 213, 95, 253, 163, 130, 220,
		82, 126, 41, 150, 181, 3, 251, 58, 48, 140, 4, 32, 13, 227, 58, 245,
		180, 154, 34, 91, 61, 30, 17, 77, 0, 112, 142, 245, 13, 51, 89, 53,
		171, 54, 150, 246, 223, 228, 13, 213, 202, 2, 179, 157, 131, 235, 98, 73,
		185, 40, 86, 198, 154, 14, 7, 71, 153, 189, 226, 138, 127, 200, 11, 81,
		21, 110, 94, 110, 178, 197, 120, 125, 98, 168, 35, 1, 55, 142, 113, 236,
		219, 195, 191, 231, 93, 123, 120, 111, 192, 33, 179, 34, 28, 59, 94, 15,
		79, 141, 65, 13, 181, 48, 239, 236, 230, 141, 221, 51, 188, 217, 110, 168,
		109, 51, 78, 169, 235, 89, 159, 10, 161, 96, 219, 137, 244, 171, 173, 14,
		238, 180, 226, 253, 221, 79, 109, 53, 35, 82, 99, 20, 194, 235, 223, 136,
		99, 77, 251, 100, 5, 42, 149, 27, 160, 136, 89, 53, 112, 111, 47, 43,
		240, 236, 99, 160, 56, 71, 229, 166, 111, 245, 120, 197, 93, 3, 196, 134,
		252, 164, 81, 109, 1, 157, 143, 153, 252, 116, 115, 226, 195, 54, 129, 13,
		133, 121, 145, 135, 20, 0, 62, 19, 200, 24, 63, 157, 86, 196, 246, 24,
		248, 139, 154, 104, 57, 112, 61, 68, 162, 99, 162, 53, 38, 137, 210, 22,
		157, 56, 236, 202, 152, 216, 28, 105, 198, 31, 86, 182, 24, 106, 186, 196,
		213, 18, 63, 115, 0, 102, 32, 87, 229, 82, 93, 11, 24, 11, 188, 48,
		129, 54, 34, 134, 138, 231, 31, 241, 69, 9, 17, 155, 25, 25, 54, 73,
		47, 243, 237, 105, 5, 228, 219, 240, 58, 102, 41, 108, 166, 101, 134, 209,
		101, 70, 9, 138, 114, 231, 141, 120, 95, 115, 31, 226, 254, 28, 195, 133,
		35, 2, 250, 146, 194, 86, 235, 18, 92, 193, 176, 145, 202, 109, 188, 34,
		214, 243, 40, 10, 58, 78, 128, 160, 141, 250, 238, 89, 112, 55, 145, 188,
		124, 140, 245, 193, 41, 162, 61, 102, 56, 106, 211, 45, 25, 31, 89, 148,
		196, 125, 194, 173, 251, 190, 252, 51, 187, 20, 232, 168, 10, 189, 154, 167,
		48, 18, 188, 53, 243, 162, 129, 146, 163, 218, 121, 25, 224, 249, 152, 5,
		53, 239, 72, 163, 204, 174, 51, 118, 6, 172, 204, 69, 22, 131, 234, 168,
		250, 60, 185, 195, 13, 136, 247, 230, 45, 94, 99, 88, 176, 27, 70, 76,
		23, 70, 149, 197, 33, 61, 29, 104, 136, 52, 254, 126, 156, 42, 171, 114,
		6, 236, 245, 39, 115, 220, 23, 227, 13, 140, 68, 65, 158, 174, 23, 51,
		218, 23, 180, 91, 5, 109, 139, 90, 102, 129, 3, 123, 196, 126, 34, 72,
		187, 108, 81, 40, 197, 227, 148, 20, 30, 239, 226, 204, 202, 244, 11, 126,
		122, 179, 153, 133, 174, 17, 206, 30, 63, 85, 84, 35, 134, 16, 117, 163,
		54, 31, 237, 181, 82, 158, 66, 209, 59, 31, 79, 27, 26, 68, 44, 121,
		8, 198, 151, 188, 247, 184, 127, 197, 14, 243, 198, 209, 214, 189, 174, 254,
		180, 91, 124, 88, 209, 151, 79, 180, 10, 101, 44, 42, 103, 238, 83, 138,
		74, 161, 223, 116, 137, 27, 72, 112, 141, 130, 155, 218, 83, 51, 107, 226,
		218, 184, 126, 106, 246, 202, 95, 217, 143, 201, 67, 7, 181, 146, 163, 148,
		88, 83, 198, 214, 51, 166, 165, 200, 181, 143, 133, 153, 96, 196, 129, 123,
		8, 240, 225, 233, 145, 126, 195, 253, 177, 198, 95, 250, 242, 40, 241, 126,
		119, 116, 132, 30, 134, 161, 157, 227, 139, 101, 207, 139, 73, 87, 194, 183,
		120, 242, 216, 218, 129, 112, 21, 175, 29, 41, 204, 155, 135, 214, 111, 64,
		237, 70, 29, 225, 211, 21, 159, 109, 246, 42, 112, 27, 192, 18, 218, 83,
		205, 109, 198, 65, 72, 187, 147, 120, 97, 150, 44, 115, 159, 39, 131, 197,
		205, 4, 111, 92, 72, 100, 216, 35, 250, 102, 45, 21, 222, 124, 147, 236,
		141, 126, 187, 166, 51, 93, 106, 208, 63, 123, 224, 130, 11, 229, 198, 68,
		2, 176, 209, 212, 152, 83, 191, 171, 45, 231, 110, 178, 104, 248, 138, 162,
		9, 177, 197, 119, 53, 59, 107, 131, 163, 92, 93, 142, 165, 106, 67, 148,
		181, 108, 205, 175, 105, 131, 161, 21, 240, 64, 123, 88, 125, 157, 221, 129,
		37, 83, 147, 39, 0, 82, 225, 77, 173, 104, 234, 170, 167, 230, 178, 74,
		198, 255, 244, 148, 56, 68, 112, 12, 18, 24, 19, 67, 26, 152, 33, 168,
		12, 242, 98, 35, 70, 213, 138, 13, 56, 106, 178, 33, 84, 5, 252, 194,
		242, 146, 209, 54, 105, 123, 165, 4, 150, 51, 37, 219, 68, 230, 239, 68,
		32, 139, 28, 216, 251, 137, 223, 178, 78, 83, 160, 183, 240, 207, 123, 134,
		194, 91, 88, 161, 255, 77, 64, 146, 245, 226, 38, 84, 17, 39, 36, 202,
		4, 24, 207, 226, 139, 74, 144, 79, 11, 186, 61, 206, 73, 104, 3, 0})
	rotor3 = rotor.New(8171, 2059, 4088, &[...]byte{
		183, 4, 153, 124, 108, 89, 189, 227, 187, 135, 229, 17, 232, 225, 32, 118,
		140, 13, 77, 251, 250, 243, 229, 64, 241, 136, 98, 165, 224, 144, 35, 13,
		87, 31, 138, 102, 13, 201, 254, 9, 100, 172, 180, 46, 170, 247, 210, 18,
		219, 67, 143, 118, 234, 78, 30, 227, 153, 13, 85, 205, 150, 142, 80, 236,
		251, 229, 59, 251, 5, 65, 128, 219, 70, 225, 127, 11, 121, 123, 46, 159,
		82, 98, 251, 139, 216, 167, 142, 55, 143, 174, 232, 21, 155, 38, 98, 104,
		50, 171, 101, 197, 71, 4, 55, 138, 183, 93, 196, 237, 92, 57, 227, 161,
		101, 138, 219, 19, 224, 226, 223, 20, 144, 9, 94, 108, 96, 123, 30, 61,
		73, 50, 249, 214, 232, 13, 150, 35, 154, 234, 229, 192, 13, 162, 237, 58,
		174, 159, 69, 47, 152, 141, 60, 85, 92, 50, 49, 209, 115, 229, 183, 99,
		68, 184, 98, 245, 71, 35, 241, 7, 216, 3, 184, 217, 136, 189, 146, 60,
		170, 61, 140, 241, 75, 253, 219, 132, 207, 64, 167, 58, 60, 227, 120, 186,
		232, 209, 98, 219, 79, 121, 98, 246, 153, 144, 202, 39, 1, 94, 49, 9,
		4, 45, 84, 49, 231, 201, 80, 178, 113, 80, 47, 78, 142, 211, 5, 143,
		100, 170, 24, 137, 184, 77, 250, 81, 96, 57, 157, 75, 31, 192, 129, 186,
		99, 61, 16, 193, 201, 230, 249, 123, 215, 222, 221, 186, 211, 86, 207, 203,
		172, 246, 92, 133, 238, 70, 127, 58, 165, 138, 186, 236, 57, 13, 145, 170,
		245, 196, 198, 19, 217, 96, 254, 100, 103, 116, 119, 86, 160, 199, 31, 86,
		128, 138, 92, 141, 207, 147, 43, 49, 93, 149, 31, 222, 223, 107, 183, 81,
		252, 162, 227, 255, 91, 30, 234, 163, 242, 43, 14, 210, 198, 189, 172, 105,
		162, 143, 241, 23, 246, 39, 43, 36, 73, 109, 30, 30, 222, 205, 141, 106,
		24, 232, 247, 167, 120, 183, 155, 144, 226, 26, 103, 151, 230, 232, 77, 180,
		100, 222, 211, 167, 84, 224, 214, 58, 163, 194, 27, 88, 62, 222, 105, 221,
		34, 126, 53, 138, 203, 200, 105, 150, 226, 131, 176, 158, 92, 139, 103, 221,
		183, 77, 59, 106, 229, 214, 145, 54, 106, 113, 81, 26, 168, 88, 136, 88,
		202, 165, 208, 52, 216, 215, 208, 47, 244, 119, 2, 237, 251, 25, 231, 136,
		232, 165, 135, 245, 56, 109, 56, 153, 145, 105, 209, 45, 98, 42, 225, 7,
		253, 183, 200, 79, 219, 57, 6, 190, 49, 60, 71, 114, 46, 68, 15, 215,
		228, 72, 56, 10, 46, 24, 165, 254, 157, 48, 146, 48, 233, 98, 0, 164,
		105, 71, 222, 125, 217, 150, 133, 178, 1, 85, 163, 9, 255, 217, 121, 104,
		63, 178, 209, 80, 155, 208, 45, 146, 243, 126, 59, 118, 53, 33, 189, 71,
		130, 39, 3, 89, 121, 20, 55, 199, 139, 117, 63, 174, 21, 141, 75, 135,
		205, 185, 136, 11, 14, 135, 60, 192, 235, 29, 10, 14, 238, 48, 178, 119,
		85, 226, 156, 77, 221, 77, 109, 36, 129, 56, 77, 143, 194, 200, 220, 210,
		152, 196, 55, 210, 139, 5, 129, 24, 109, 220, 21, 39, 145, 75, 197, 220,
		117, 7, 237, 39, 82, 31, 233, 173, 27, 147, 79, 119, 48, 182, 168, 45,
		25, 213, 59, 233, 3, 203, 125, 142, 207, 43, 173, 39, 39, 140, 37, 27,
		143, 170, 64, 3, 45, 40, 176, 156, 183, 244, 244, 211, 211, 13, 185, 115,
		71, 138, 148, 180, 217, 162, 120, 149, 131, 138, 55, 243, 121, 207, 151, 236,
		188, 174, 200, 206, 215, 137, 104, 214, 64, 39, 11, 26, 172, 216, 90, 12,
		54, 236, 165, 183, 187, 109, 254, 108, 139, 147, 166, 62, 238, 32, 13, 117,
		98, 179, 123, 196, 161, 53, 46, 194, 14, 70, 146, 233, 233, 43, 218, 34,
		253, 194, 156, 214, 61, 71, 162, 211, 42, 182, 244, 83, 106, 107, 242, 48,
		26, 152, 104, 21, 231, 3, 241, 36, 57, 90, 102, 20, 242, 202, 103, 183,
		139, 136, 224, 133, 113, 83, 199, 96, 80, 4, 126, 5, 177, 202, 165, 85,
		143, 210, 210, 51, 224, 58, 54, 106, 182, 175, 253, 89, 246, 250, 133, 141,
		8, 193, 112, 253, 153, 37, 79, 204, 18, 1, 194, 255, 63, 190, 215, 146,
		227, 123, 88, 188, 89, 33, 134, 78, 21, 178, 63, 207, 228, 148, 206, 137,
		216, 237, 96, 35, 201, 166, 235, 155, 122, 169, 140, 7, 147, 216, 47, 169,
		54, 52, 252, 232, 178, 195, 65, 0, 117, 121, 28, 8, 100, 36, 4, 180,
		55, 233, 212, 103, 195, 152, 126, 3, 15, 96, 245, 34, 204, 238, 230, 42,
		175, 245, 216, 92, 77, 83, 24, 124, 55, 138, 94, 121, 173, 109, 29, 48,
		60, 14, 249, 240, 23, 237, 243, 196, 18, 39, 174, 230, 44, 183, 197, 134,
		131, 79, 39, 155, 54, 134, 37, 86, 154, 240, 192, 95, 184, 242, 25, 140,
		148, 175, 192, 126, 111, 30, 48, 158, 61, 45, 128, 148, 208, 155, 142, 78,
		142, 16, 247, 165, 114, 3, 199, 139, 25, 246, 84, 106, 147, 128, 29, 133,
		234, 106, 191, 9, 26, 21, 199, 254, 108, 80, 163, 179, 57, 68, 129, 237,
		207, 85, 212, 47, 99, 241, 164, 104, 168, 184, 250, 140, 139, 146, 173, 242,
		113, 85, 170, 185, 30, 234, 73, 163, 69, 28, 137, 170, 181, 74, 149, 120,
		166, 221, 99, 233, 85, 19, 19, 244, 25, 99, 146, 213, 46, 33, 68, 233,
		196, 110, 40, 76, 38, 63, 248, 99, 224, 97, 132, 237, 68, 135, 88, 155,
		118, 114, 79, 190, 137, 249, 59, 62, 212, 149, 73, 144, 4, 198, 81, 128,
		217, 254, 240, 27, 112, 199, 172, 77, 73, 185, 69, 205, 104, 222, 141, 178,
		162, 95, 247, 40, 137, 166, 15, 245, 127, 154, 213, 49, 206, 184, 37, 200,
		228, 99, 203, 234, 29, 223, 61, 44, 143, 64, 15, 7, 177, 99, 108, 104,
		218, 215, 159, 47, 7, 138, 71, 20, 43, 5, 135, 28, 105, 0, 0, 0})
	rotor4 = rotor.New(8167, 3955, 425, &[...]byte{
		245, 225, 51, 14, 227, 245, 198, 78, 228, 38, 189, 119, 116, 159, 228, 13,
		49, 243, 169, 158, 33, 26, 120, 41, 105, 82, 98, 132, 40, 84, 176, 229,
		134, 73, 143, 84, 35, 161, 252, 216, 141, 76, 255, 71, 177, 188, 110, 11,
		38, 13, 190, 182, 84, 159, 244, 103, 130, 1, 61, 240, 138, 63, 107, 88,
		95, 42, 5, 139, 243, 147, 39, 194, 73, 151, 57, 40, 118, 203, 26, 94,
		17, 56, 1, 194, 222, 211, 67, 108, 129, 79, 229, 183, 25, 70, 80, 229,
		218, 132, 203, 17, 114, 240, 218, 219, 144, 70, 228, 174, 103, 134, 216, 94,
		59, 17, 45, 32, 223, 155, 62, 147, 120, 193, 6, 63, 227, 224, 118, 46,
		184, 209, 207, 42, 113, 198, 24, 179, 192, 184, 165, 12, 109, 106, 76, 129,
		89, 28, 200, 137, 87, 180, 60, 28, 196, 182, 228, 236, 61, 248, 214, 218,
		253, 28, 84, 236, 24, 171, 29, 86, 27, 81, 85, 92, 67, 65, 248, 227,
		24, 36, 230, 151, 173, 244, 151, 11, 245, 156, 193, 174, 206, 194, 206, 89,
		68, 163, 102, 236, 162, 89, 120, 171, 92, 48, 207, 134, 251, 187, 240, 26,
		100, 4, 51, 92, 40, 165, 5, 153, 240, 71, 42, 71, 145, 75, 69, 232,
		158, 242, 225, 129, 29, 90, 53, 43, 246, 132, 211, 244, 101, 218, 252, 229,
		84, 216, 94, 206, 22, 132, 89, 80, 248, 51, 35, 170, 69, 115, 116, 195,
		149, 75, 91, 131, 44, 162, 229, 94, 38, 251, 80, 203, 229, 68, 115, 212,
		10, 89, 207, 50, 140, 98, 224, 59, 216, 103, 134, 106, 212, 166, 193, 248,
		136, 87, 136, 165, 141, 101, 94, 107, 54, 36, 88, 166, 232, 224, 79, 145,
		153, 127, 224, 87, 179, 4, 145, 110, 154, 223, 20, 163, 122, 248, 59, 119,
		43, 172, 164, 216, 219, 38, 137, 109, 138, 184, 189, 182, 7, 137, 138, 59,
		96, 189, 160, 145, 90, 106, 220, 150, 232, 243, 228, 202, 2, 206, 216, 85,
		185, 241, 27, 72, 95, 185, 53, 191, 93, 17, 61, 88, 77, 58, 27, 44,
		1, 131, 34, 151, 82, 224, 34, 51, 166, 221, 175, 224, 61, 244, 167, 8,
		91, 45, 118, 62, 40, 201, 231, 250, 210, 184, 143, 100, 167, 14, 212, 189,
		141, 51, 62, 187, 241, 9, 121, 213, 251, 41, 199, 79, 53, 84, 166, 176,
		228, 75, 170, 251, 96, 156, 170, 89, 20, 132, 76, 92, 213, 151, 64, 239,
		38, 187, 190, 51, 252, 34, 47, 87, 34, 180, 158, 70, 33, 163, 50, 190,
		67, 179, 146, 9, 63, 89, 186, 198, 16, 78, 148, 59, 209, 108, 137, 187,
		224, 12, 52, 203, 165, 188, 238, 114, 118, 198, 81, 143, 69, 81, 201, 204,
		243, 89, 237, 252, 184, 92, 16, 87, 198, 23, 159, 71, 27, 172, 91, 192,
		28, 244, 157, 221, 35, 145, 67, 45, 10, 201, 112, 104, 96, 4, 115, 8,
		109, 46, 140, 60, 34, 79, 71, 57, 44, 220, 65, 124, 40, 98, 5, 179,
		5, 69, 84, 15, 14, 234, 55, 54, 75, 191, 139, 180, 50, 208, 207, 117,
		229, 124, 213, 177, 2, 235, 164, 175, 241, 229, 132, 123, 125, 101, 170, 208,
		207, 23, 13, 29, 46, 73, 19, 114, 167, 201, 205, 196, 158, 149, 144, 253,
		29, 26, 230, 5, 89, 188, 243, 147, 178, 166, 31, 252, 198, 93, 205, 9,
		128, 65, 98, 50, 64, 28, 154, 122, 182, 1, 101, 32, 1, 79, 195, 31,
		66, 135, 76, 109, 77, 84, 15, 192, 249, 18, 56, 152, 105, 35, 46, 26,
		97, 196, 244, 51, 245, 49, 80, 36, 140, 250, 242, 108, 197, 199, 124, 46,
		112, 102, 26, 114, 153, 72, 51, 242, 0, 174, 240, 211, 134, 63, 52, 93,
		182, 108, 190, 31, 187, 112, 155, 60, 57, 210, 87, 238, 91, 183, 5, 217,
		13, 193, 231, 43, 6, 176, 114, 69, 59, 26, 240, 52, 137, 235, 161, 220,
		35, 142, 151, 176, 148, 249, 171, 88, 132, 156, 18, 95, 200, 253, 100, 228,
		15, 203, 170, 6, 213, 239, 115, 244, 90, 208, 110, 130, 47, 16, 71, 124,
		10, 17, 36, 38, 234, 243, 72, 58, 110, 233, 234, 212, 142, 204, 192, 104,
		130, 194, 157, 149, 136, 22, 114, 45, 244, 229, 13, 110, 22, 146, 111, 92,
		245, 201, 18, 20, 77, 46, 95, 185, 192, 194, 122, 79, 229, 17, 66, 76,
		72, 39, 148, 173, 233, 184, 152, 1, 7, 61, 209, 96, 13, 141, 24, 18,
		135, 203, 181, 202, 229, 212, 215, 144, 20, 56, 148, 127, 48, 82, 163, 203,
		212, 50, 57, 177, 195, 162, 162, 127, 16, 232, 169, 193, 110, 165, 128, 198,
		183, 92, 177, 207, 95, 201, 251, 44, 163, 228, 141, 85, 252, 229, 81, 92,
		253, 55, 76, 94, 252, 91, 51, 163, 75, 224, 141, 100, 236, 59, 46, 128,
		119, 128, 208, 177, 127, 45, 142, 225, 155, 120, 16, 172, 10, 247, 71, 121,
		137, 76, 2, 230, 102, 249, 189, 0, 23, 117, 43, 181, 119, 138, 227, 22,
		70, 111, 6, 243, 134, 134, 36, 21, 35, 255, 33, 172, 3, 147, 63, 151,
		217, 163, 135, 9, 57, 141, 104, 232, 105, 139, 107, 91, 249, 30, 98, 161,
		33, 224, 163, 217, 53, 224, 34, 37, 89, 138, 62, 157, 34, 31, 142, 83,
		127, 166, 215, 212, 50, 45, 82, 229, 16, 97, 35, 149, 169, 203, 114, 195,
		170, 76, 243, 175, 166, 71, 76, 168, 155, 29, 76, 46, 117, 75, 143, 165,
		44, 140, 16, 36, 70, 113, 156, 16, 143, 68, 117, 244, 175, 138, 250, 159,
		161, 13, 37, 96, 217, 122, 70, 79, 159, 102, 190, 121, 125, 249, 167, 30,
		164, 35, 226, 230, 28, 165, 193, 171, 68, 242, 245, 147, 253, 172, 227, 228,
		3, 248, 141, 173, 29, 111, 145, 228, 244, 33, 25, 181, 153, 250, 240, 25,
		135, 241, 122, 99, 39, 114, 147, 222, 59, 186, 79, 242, 134, 152, 249, 84,
		207, 16, 13, 188, 148, 52, 41, 49, 66, 20, 42, 216, 114, 0, 0, 0})
	rotor5 = rotor.New(8161, 4924, 2937, &[...]byte{
		8, 6, 31, 42, 211, 12, 167, 247, 133, 255, 114, 236, 84, 1, 57, 187,
		127, 218, 111, 66, 46, 179, 177, 158, 148, 31, 180, 182, 38, 129, 241, 198,
		233, 82, 114, 51, 87, 170, 79, 63, 107, 89, 68, 40, 249, 52, 87, 63,
		108, 70, 45, 52, 108, 202, 199, 226, 161, 104, 19, 231, 143, 37, 45, 216,
		224, 108, 44, 60, 223, 82, 124, 221, 50, 171, 223, 95, 198, 3, 96, 188,
		75, 116, 146, 40, 49, 63, 194, 149, 202, 3, 11, 15, 223, 56, 113, 169,
		191, 146, 60, 173, 34, 237, 174, 167, 174, 86, 222, 202, 159, 97, 199, 102,
		60, 129, 94, 95, 142, 16, 231, 142, 228, 52, 182, 114, 83, 147, 12, 14,
		23, 209, 228, 110, 52, 149, 240, 71, 198, 176, 111, 217, 125, 68, 109, 143,
		198, 117, 89, 162, 57, 8, 252, 220, 246, 148, 65, 224, 198, 92, 142, 172,
		166, 208, 218, 57, 238, 72, 174, 209, 123, 82, 46, 251, 160, 149, 22, 195,
		214, 189, 206, 83, 108, 24, 82, 190, 54, 179, 43, 45, 161, 40, 94, 150,
		90, 189, 133, 5, 63, 75, 239, 76, 130, 202, 165, 98, 82, 182, 204, 66,
		73, 122, 139, 207, 85, 165, 120, 139, 184, 53, 132, 72, 193, 113, 156, 138,
		182, 162, 16, 254, 110, 219, 66, 121, 15, 131, 38, 226, 209, 196, 153, 12,
		44, 211, 2, 173, 11, 183, 157, 114, 154, 251, 36, 147, 88, 47, 50, 129,
		221, 58, 208, 103, 215, 137, 52, 11, 231, 70, 28, 63, 248, 252, 126, 49,
		119, 93, 42, 98, 177, 132, 92, 255, 58, 252, 196, 221, 153, 199, 189, 43,
		165, 200, 67, 198, 170, 132, 154, 83, 76, 109, 239, 109, 50, 112, 143, 54,
		59, 27, 107, 79, 55, 58, 40, 111, 158, 8, 215, 98, 9, 88, 63, 241,
		83, 252, 223, 95, 157, 111, 231, 96, 85, 3, 42, 194, 113, 82, 107, 159,
		254, 189, 163, 212, 144, 59, 201, 140, 93, 18, 244, 148, 183, 185, 241, 131,
		71, 40, 17, 54, 165, 51, 67, 79, 232, 24, 95, 57, 244, 229, 3, 119,
		103, 156, 74, 232, 55, 34, 12, 193, 189, 157, 3, 150, 106, 160, 4, 223,
		22, 14, 106, 81, 120, 39, 246, 101, 104, 49, 5, 68, 185, 153, 119, 218,
		103, 0, 170, 196, 161, 87, 64, 240, 210, 44, 102, 141, 101, 208, 163, 89,
		163, 69, 210, 66, 24, 110, 78, 186, 173, 127, 44, 82, 3, 227, 166, 240,
		76, 77, 167, 245, 95, 21, 242, 233, 213, 80, 153, 239, 44, 129, 124, 37,
		223, 222, 30, 213, 66, 1, 243, 171, 86, 193, 130, 125, 42, 213, 155, 96,
		192, 121, 113, 146, 141, 103, 133, 32, 20, 37, 106, 61, 96, 105, 212, 107,
		220, 185, 222, 113, 200, 198, 11, 244, 171, 3, 202, 85, 187, 241, 88, 186,
		18, 18, 168, 17, 9, 240, 44, 76, 149, 162, 140, 101, 54, 8, 141, 134,
		48, 64, 65, 183, 173, 89, 24, 77, 0, 85, 157, 213, 163, 9, 237, 39,
		35, 18, 57, 149, 110, 106, 102, 50, 180, 198, 149, 31, 239, 97, 135, 169,
		114, 13, 255, 128, 100, 116, 137, 72, 92, 154, 33, 50, 67, 16, 8, 208,
		126, 62, 82, 179, 106, 146, 161, 73, 233, 49, 176, 5, 245, 204, 240, 69,
		90, 189, 162, 172, 64, 19, 146, 184, 233, 186, 203, 72, 6, 34, 42, 120,
		125, 158, 37, 5, 174, 105, 5, 52, 122, 166, 125, 191, 44, 198, 151, 238,
		143, 201, 85, 154, 57, 55, 110, 186, 42, 56, 60, 236, 35, 24, 107, 64,
		196, 23, 55, 174, 209, 89, 160, 11, 244, 94, 122, 77, 243, 187, 154, 158,
		183, 251, 237, 2, 129, 86, 133, 223, 230, 55, 137, 100, 89, 59, 220, 116,
		1, 112, 110, 68, 118, 152, 181, 228, 205, 127, 170, 255, 220, 185, 243, 68,
		151, 23, 122, 251, 56, 221, 143, 182, 131, 111, 77, 78, 237, 96, 45, 182,
		85, 32, 17, 43, 193, 148, 176, 63, 31, 243, 34, 29, 126, 240, 191, 85,
		62, 249, 172, 78, 66, 110, 96, 231, 174, 32, 152, 82, 10, 159, 230, 180,
		170, 245, 74, 82, 58, 204, 206, 145, 186, 3, 58, 235, 54, 171, 55, 239,
		241, 126, 117, 74, 152, 118, 73, 200, 150, 12, 9, 20, 30, 70, 45, 88,
		57, 203, 98, 68, 142, 250, 19, 218, 166, 12, 191, 234, 110, 161, 87, 3,
		21, 87, 54, 70, 14, 163, 199, 31, 79, 134, 89, 253, 0, 111, 181, 148,
		4, 51, 143, 99, 98, 191, 175, 101, 220, 131, 47, 99, 69, 6, 65, 157,
		216, 55, 166, 221, 0, 80, 104, 173, 37, 8, 148, 73, 110, 206, 233, 107,
		162, 40, 243, 0, 250, 7, 175, 164, 196, 24, 205, 70, 202, 217, 33, 183,
		254, 45, 181, 241, 59, 81, 10, 174, 6, 2, 218, 69, 219, 200, 162, 72,
		158, 21, 110, 195, 108, 15, 93, 141, 99, 33, 222, 204, 72, 16, 54, 155,
		24, 9, 162, 225, 149, 115, 97, 215, 251, 113, 82, 174, 116, 32, 45, 143,
		152, 74, 48, 31, 81, 172, 23, 253, 245, 167, 153, 63, 209, 109, 118, 154,
		242, 37, 60, 96, 210, 219, 242, 51, 31, 76, 132, 58, 238, 242, 154, 29,
		182, 162, 89, 21, 102, 1, 247, 253, 154, 162, 213, 106, 171, 95, 95, 249,
		172, 188, 205, 4, 138, 231, 205, 99, 57, 184, 119, 123, 181, 9, 160, 226,
		229, 185, 213, 226, 104, 222, 231, 80, 176, 37, 96, 175, 207, 59, 60, 72,
		66, 37, 68, 1, 234, 236, 92, 139, 240, 185, 140, 83, 7, 21, 127, 15,
		92, 94, 224, 77, 49, 38, 33, 163, 209, 249, 181, 139, 40, 213, 101, 72,
		23, 61, 135, 197, 128, 73, 125, 13, 140, 3, 223, 216, 208, 119, 131, 230,
		162, 146, 0, 117, 212, 102, 122, 137, 40, 207, 34, 222, 17, 12, 62, 84,
		166, 25, 78, 239, 11, 255, 229, 216, 169, 2, 114, 118, 255, 180, 223, 132,
		92, 102, 99, 61, 41, 63, 104, 109, 77, 2, 227, 141, 1, 0, 0, 0})
	rotor6 = rotor.New(8147, 2199, 931, &[...]byte{
		99, 222, 220, 115, 3, 241, 147, 65, 25, 207, 45, 110, 175, 85, 172, 83,
		188, 150, 105, 19, 139, 138, 41, 219, 131, 144, 249, 122, 234, 42, 244, 66,
		246, 50, 206, 53, 185, 104, 62, 109, 230, 187, 226, 88, 17, 120, 100, 144,
		149, 158, 211, 94, 220, 155, 112, 170, 184, 6, 181, 223, 213, 51, 249, 229,
		4, 123, 182, 147, 241, 125, 65, 11, 187, 255, 91, 73, 182, 196, 165, 18,
		93, 164, 155, 250, 224, 0, 74, 244, 47, 113, 126, 143, 95, 60, 13, 3,
		48, 112, 143, 189, 166, 176, 178, 48, 52, 37, 10, 54, 153, 84, 122, 162,
		79, 151, 49, 23, 179, 139, 21, 73, 110, 141, 182, 45, 201, 21, 14, 213,
		146, 138, 246, 228, 156, 227, 0, 0, 189, 25, 72, 186, 21, 194, 51, 72,
		189, 2, 121, 31, 231, 135, 113, 251, 22, 204, 35, 185, 168, 105, 217, 137,
		90, 110, 139, 149, 130, 168, 32, 96, 25, 198, 150, 101, 210, 107, 44, 190,
		47, 90, 97, 46, 151, 235, 204, 44, 208, 251, 239, 125, 46, 1, 75, 76,
		27, 248, 164, 185, 10, 209, 216, 42, 8, 158, 206, 231, 254, 244, 140, 56,
		12, 106, 96, 35, 164, 93, 131, 224, 45, 214, 178, 133, 119, 238, 134, 180,
		246, 118, 27, 128, 132, 225, 205, 159, 213, 234, 27, 9, 149, 242, 42, 161,
		184, 72, 106, 78, 206, 24, 27, 22, 26, 33, 141, 104, 37, 89, 148, 155,
		70, 28, 135, 243, 154, 247, 121, 95, 76, 45, 183, 201, 182, 65, 222, 59,
		107, 98, 8, 203, 218, 141, 3, 222, 91, 172, 110, 198, 243, 220, 167, 201,
		218, 78, 178, 117, 12, 200, 114, 221, 189, 184, 25, 232, 173, 195, 206, 217,
		203, 25, 233, 73, 207, 224, 178, 90, 166, 157, 57, 51, 214, 254, 247, 47,
		233, 96, 161, 158, 228, 245, 20, 67, 174, 180, 235, 34, 156, 115, 124, 43,
		170, 47, 141, 127, 242, 236, 110, 1, 57, 16, 145, 127, 142, 160, 225, 162,
		67, 81, 82, 55, 134, 242, 3, 184, 254, 23, 251, 163, 125, 93, 130, 227,
		47, 28, 215, 254, 82, 224, 252, 118, 224, 28, 213, 178, 160, 198, 56, 167,
		74, 48, 60, 90, 28, 125, 7, 41, 154, 114, 112, 209, 117, 91, 45, 208,
		55, 51, 207, 22, 87, 249, 114, 236, 51, 234, 33, 202, 171, 71, 165, 198,
		220, 84, 80, 31, 44, 106, 78, 96, 78, 91, 133, 241, 67, 146, 40, 253,
		218, 38, 179, 71, 221, 91, 215, 97, 210, 172, 92, 40, 116, 167, 73, 182,
		209, 6, 85, 115, 218, 8, 34, 156, 169, 218, 192, 114, 204, 70, 22, 56,
		59, 246, 218, 136, 164, 16, 152, 217, 247, 112, 125, 243, 189, 8, 231, 211,
		191, 100, 134, 253, 229, 239, 55, 170, 191, 205, 250, 69, 7, 155, 212, 75,
		60, 72, 141, 69, 85, 211, 115, 97, 182, 244, 70, 237, 8, 40, 130, 56,
		37, 241, 248, 30, 199, 149, 225, 58, 119, 122, 35, 242, 55, 232, 146, 16,
		232, 197, 129, 157, 185, 10, 168, 163, 210, 3, 216, 95, 226, 162, 181, 218,
		1, 166, 93, 139, 143, 43, 72, 153, 197, 65, 85, 129, 243, 249, 83, 234,
		25, 88, 38, 202, 236, 166, 82, 146, 88, 238, 27, 113, 193, 26, 207, 223,
		229, 91, 5, 7, 192, 156, 17, 84, 154, 196, 12, 72, 81, 4, 88, 218,
		32, 214, 145, 150, 48, 154, 205, 134, 7, 101, 92, 201, 118, 37, 107, 55,
		175, 20, 52, 118, 43, 177, 212, 24, 27, 95, 32, 85, 138, 0, 88, 178,
		215, 200, 90, 29, 17, 221, 172, 169, 5, 254, 65, 91, 108, 75, 111, 195,
		107, 229, 170, 70, 28, 139, 183, 104, 180, 23, 133, 213, 85, 108, 180, 182,
		85, 82, 116, 199, 93, 72, 43, 227, 14, 65, 72, 247, 201, 127, 44, 27,
		112, 120, 81, 104, 9, 165, 161, 162, 35, 101, 48, 99, 217, 195, 173, 59,
		213, 114, 154, 87, 57, 145, 129, 73, 124, 229, 223, 30, 206, 126, 219, 246,
		174, 208, 223, 200, 54, 221, 17, 129, 113, 71, 94, 67, 234, 203, 119, 240,
		215, 78, 180, 164, 201, 128, 218, 252, 10, 33, 97, 115, 194, 237, 195, 29,
		41, 172, 219, 194, 110, 204, 139, 9, 201, 35, 53, 246, 220, 58, 88, 198,
		209, 123, 41, 123, 187, 179, 67, 171, 14, 29, 238, 124, 1, 163, 16, 172,
		155, 169, 171, 61, 31, 184, 53, 83, 209, 19, 75, 5, 138, 140, 168, 204,
		80, 86, 145, 124, 37, 218, 213, 125, 106, 32, 67, 237, 68, 149, 205, 142,
		164, 207, 248, 129, 11, 85, 192, 94, 191, 192, 26, 142, 1, 234, 120, 181,
		119, 91, 121, 249, 210, 62, 77, 102, 37, 183, 89, 170, 158, 91, 174, 20,
		77, 55, 148, 146, 228, 92, 86, 139, 133, 157, 58, 106, 6, 34, 127, 245,
		11, 3, 12, 136, 105, 55, 105, 172, 125, 125, 69, 157, 28, 28, 138, 35,
		150, 134, 150, 88, 242, 109, 42, 213, 34, 94, 216, 8, 164, 202, 207, 253,
		163, 242, 89, 42, 84, 145, 23, 129, 53, 132, 41, 155, 50, 2, 207, 154,
		94, 119, 52, 31, 240, 34, 17, 251, 186, 200, 54, 87, 27, 5, 140, 5,
		99, 123, 43, 49, 160, 255, 119, 115, 190, 77, 90, 253, 208, 151, 196, 61,
		233, 18, 240, 44, 134, 55, 29, 236, 4, 78, 247, 205, 115, 111, 30, 91,
		6, 111, 248, 144, 9, 228, 123, 69, 43, 190, 212, 74, 238, 223, 1, 84,
		156, 109, 160, 57, 159, 16, 230, 108, 73, 58, 181, 104, 83, 85, 230, 134,
		48, 89, 2, 209, 193, 236, 17, 200, 4, 3, 197, 209, 175, 198, 247, 48,
		121, 153, 177, 26, 126, 143, 103, 221, 52, 95, 98, 89, 90, 142, 88, 113,
		118, 26, 35, 150, 134, 109, 3, 90, 83, 123, 31, 243, 230, 158, 27, 136,
		159, 12, 202, 120, 110, 113, 123, 173, 98, 157, 226, 181, 76, 155, 88, 84,
		76, 217, 30, 132, 204, 215, 83, 87, 161, 23, 2, 0, 0, 0, 0, 0})
	permutator1 = permutator.New(1, &[...]byte{
		248, 181, 196, 140, 239, 198, 53, 229, 222, 20, 255, 34, 118, 41, 127, 45,
		95, 174, 142, 115, 137, 132, 100, 121, 176, 187, 122, 199, 70, 9, 179, 7,
		43, 238, 113, 185, 249, 85, 59, 231, 4, 237, 139, 31, 128, 208, 82, 40,
		12, 226, 8, 223, 135, 131, 206, 6, 46, 194, 242, 188, 230, 218, 96, 98,
		101, 212, 233, 145, 37, 83, 153, 200, 130, 62, 110, 217, 51, 241, 192, 162,
		79, 171, 150, 105, 213, 144, 21, 106, 253, 88, 103, 42, 164, 10, 91, 138,
		123, 172, 15, 159, 44, 72, 1, 102, 99, 87, 97, 19, 125, 104, 36, 38,
		57, 120, 92, 178, 247, 22, 193, 76, 147, 157, 183, 5, 186, 55, 141, 30,
		158, 225, 81, 54, 236, 60, 13, 195, 66, 67, 112, 235, 126, 65, 136, 173,
		155, 149, 52, 73, 234, 114, 251, 154, 201, 48, 24, 124, 161, 129, 243, 227,
		108, 219, 189, 168, 107, 209, 23, 216, 210, 228, 134, 86, 215, 26, 163, 17,
		175, 250, 16, 170, 166, 160, 202, 165, 169, 61, 77, 75, 240, 182, 49, 90,
		197, 50, 190, 167, 58, 191, 109, 32, 35, 148, 146, 93, 151, 27, 224, 0,
		25, 68, 244, 203, 64, 143, 204, 47, 117, 94, 180, 71, 246, 89, 207, 214,
		111, 84, 156, 80, 232, 78, 177, 33, 116, 133, 211, 11, 14, 119, 56, 252,
		18, 63, 152, 3, 205, 2, 245, 254, 220, 29, 184, 69, 221, 39, 74, 28})
	permutator2 = permutator.New(2, &[...]byte{
		39, 0, 64, 155, 252, 164, 162, 145, 86, 32, 88, 37, 67, 113, 235, 205,
		231, 141, 249, 31, 53, 202, 225, 161, 169, 236, 128, 91, 50, 82, 24, 85,
		204, 203, 197, 70, 9, 140, 124, 129, 4, 20, 186, 237, 152, 126, 198, 176,
		8, 71, 78, 100, 81, 172, 98, 156, 89, 120, 134, 27, 30, 47, 143, 142,
		117, 144, 102, 149, 14, 66, 60, 133, 239, 181, 243, 108, 94, 223, 217, 2,
		136, 195, 146, 99, 25, 23, 46, 200, 12, 59, 93, 18, 139, 240, 148, 230,
		92, 111, 199, 228, 74, 13, 159, 1, 123, 83, 103, 19, 255, 65, 118, 35,
		29, 10, 95, 38, 116, 253, 55, 171, 34, 80, 216, 241, 41, 246, 193, 106,
		5, 110, 247, 192, 187, 214, 174, 215, 222, 250, 79, 72, 227, 6, 180, 209,
		77, 68, 127, 158, 254, 75, 160, 190, 36, 44, 54, 178, 125, 166, 52, 170,
		43, 57, 165, 87, 109, 45, 233, 167, 196, 229, 211, 26, 104, 49, 248, 163,
		40, 11, 245, 168, 154, 61, 188, 101, 226, 184, 7, 121, 177, 175, 153, 219,
		51, 183, 173, 191, 157, 63, 84, 62, 56, 244, 107, 22, 218, 224, 114, 131,
		232, 33, 189, 42, 207, 69, 130, 15, 208, 97, 105, 112, 115, 48, 238, 16,
		251, 182, 234, 147, 119, 76, 151, 185, 242, 206, 96, 212, 201, 194, 213, 135,
		221, 28, 179, 220, 90, 150, 138, 137, 17, 132, 21, 122, 73, 210, 3, 58})
	// Create the proforma encryption machine.  The layout of the machine is:
	// 		rotor, rotor, permutator, rotor, rotor, permutator, rotor, rotor
	proFormaMachine = []cryptors.Crypter{rotor1, rotor2, permutator1, rotor3, rotor4, permutator2, rotor5, rotor6}
	leftMost, rightMost := cryptors.CreateEncryptMachine(cryptors.BigZero, proFormaMachine...)

	// Update the rotors and permutators in a very non-linear fashion.
	for _, machine := range proFormaMachine {
		switch v := machine.(type) {
		default:
			log.Println(v)
		case *rotor.Rotor:
			updateRotor(machine.(*rotor.Rotor), leftMost, rightMost)
		case *permutator.Permutator:
			updatePermutator(machine.(*permutator.Permutator), leftMost, rightMost)
		case *cryptors.Counter:
			machine.(*cryptors.Counter).SetIndex(big.NewInt(0))
		}
	}

	// Update the tntMachine to change the order of rotors and permutators in a randon order.
	tntMachine = make([]cryptors.Crypter, 9, 9)
	// Scramble the order of the rotors and permutators
	tntOrder := key.Perm(8)

	for i, v := range tntOrder {
		tntMachine[i] = proFormaMachine[v]
	}

	tntMachine[8] = counter
}

func updateRotor(r *rotor.Rotor, left, right chan cryptors.CypherBlock) {
	var blk cryptors.CypherBlock
	blkSlice := blk.CypherBlock[:]
	copy(blkSlice, key.XORKeyStream(blkSlice))
	blk.Length = cryptors.CypherBlockBytes
	left <- blk
	blk = <-right
	rotorSize := cryptors.RotorSizes[rotorSizes[rotorSizesIndex]]
	rotorSizesIndex = (rotorSizesIndex + 1) % len(cryptors.RotorSizes)
	start := int(key.Int32n(int32(rotorSize)))
	step := int(key.Int32n(int32(rotorSize)))
	var newRotor [cryptors.RotorSizeBytes]byte
	rotor := newRotor[:0]
	blkCnt := cryptors.RotorSizeBytes / cryptors.CypherBlockBytes

	for i := 0; i < blkCnt; i++ {
		left <- blk
		blk = <-right
		rotor = append(rotor, blk.CypherBlock[:]...)
	}

	r.Update(start, rotorSize, step, &newRotor)
}

func updatePermutator(p *permutator.Permutator, left, right chan cryptors.CypherBlock) {
	var randp [cryptors.CypherBlockSize]byte
	var blk cryptors.CypherBlock
	blkSlice := blk.CypherBlock[:]
	copy(blkSlice, key.XORKeyStream(blkSlice))
	blk.Length = cryptors.CypherBlockBytes
	left <- blk
	blk = <-right
	var seed int64

	for i := 0; i < 8; i++ {
		seed = (seed << 8) + int64(uint8(blk.CypherBlock[i]))
	}

	randi := key.Perm(cryptors.CypherBlockSize)

	for idx, val := range randi {
		randp[idx] = byte(val)
	}

	p.Update(cycleSizesIndex, &randp)
	cycleSizesIndex = (cycleSizesIndex + 1) % len(cryptors.CycleSizes)
}

func encodeCypherBlock(blk cryptors.CypherBlock) []byte {
	b := make([]byte, 0, 0)
	b = append(b, byte(blk.Length))
	b = append(b, blk.CypherBlock[:]...)
	return b
}

func decodeCypherBlock(bytes []byte) *cryptors.CypherBlock {
	blk := new(cryptors.CypherBlock)
	blk.Length = int8(bytes[0])
	_ = copy(blk.CypherBlock[:], bytes[1:])
	return blk
}

func encrypt() {
	defer un(trace("encrypt"))
	encIn, encOut := io.Pipe()
	leftMost, rightMost := cryptors.CreateEncryptMachine(iCnt, tntMachine...)
	fin := os.Stdin
	fout := os.Stdout
	var wg sync.WaitGroup
	fout.WriteString(fmt.Sprintf("%s\n", iCnt))
	aIn := filters.ToAscii85(encIn)

	// Go routine to read the output from the encIn, encrypt it and
	// sends it to the ascii85.NewEncoder.
	wg.Add(1)
	go func() {
		defer deferClose("Closing encOut.", encOut.Close)
		defer wg.Done()
		defer un(trace("Go encIn -> encrypt -> ascii85.newEncoder"))
		flateIn := filters.ToFlate(fin)
		var err error
		var cnt int
		plainText := make([]byte, 0)

		for err != io.EOF {
			var blk cryptors.CypherBlock
			b := make([]byte, 1024, 1024)
			cnt, err = flateIn.Read(b)
			log.Printf("flateIn %d %v", cnt, err)
			checkFatal(err)

			if err != io.EOF {
				plainText = append(plainText, b[:cnt]...)
				log.Printf("plainText.outer %d", len(plainText))

				for len(plainText) >= cryptors.CypherBlockBytes {
					_ = copy(blk.CypherBlock[:], plainText)
					blk.Length = cryptors.CypherBlockBytes
					leftMost <- blk
					blk = <-rightMost
					cnt, err = encOut.Write([]byte(encodeCypherBlock(blk)))
					checkFatal(err)
					pt := make([]byte, 0)
					pt = append(pt, plainText[cryptors.CypherBlockBytes:]...)
					plainText = pt
					log.Printf("plainText.inner %d", len(plainText))
				}
			} else if len(plainText) > 0 { // encrypt any remaining input.
				var e error
				blk.Length = int8(len(plainText))
				_ = copy(blk.CypherBlock[:], plainText[:blk.Length])
				blk.Length = int8(len(plainText))
				leftMost <- blk
				blk = <-rightMost
				cnt, e = encOut.Write([]byte(encodeCypherBlock(blk)))
				checkFatal(e)
				log.Printf("plainText %d", len(plainText))
			}
		}

		// shutdown the encryption machine.
		var blk cryptors.CypherBlock
		leftMost <- blk
		_ = <-rightMost
	}()

	// Read the output of encodeCypherBlock and send it to STDOUT.
	defer deferClose("Closing STDOUT", fout.Close)
	cnt, err := io.Copy(fout, aIn)
	log.Printf("fout io.Copy - cnt: %d, err: %v\n", cnt, err)
	wg.Wait()
}

func decrypt() {
	defer un(trace("decrypt"))
	fin := os.Stdin
	fout := os.Stdout
	defer deferClose("decrypt -> Closing STDOUT", fout.Close)
	bRdr := bufio.NewReader(fin)
	line, err := bRdr.ReadString('\n')

	if err == nil {
		iCnt, _ = new(big.Int).SetString(line[:len(line)-1], 10)
	}

	leftMost, rightMost := cryptors.CreateDecryptMachine(iCnt, tntMachine...)
	log.Printf("decrypt -> tntMachine.GetIndex: %s", tntMachine[len(tntMachine)-1].GetIndex())
	decRdr, decWrtr := io.Pipe()
	var wg sync.WaitGroup
	wg.Add(1)

	go func() {
		defer un(trace("decrypt -> Ascii85Reader -> decryptEngine -> descOut"))
		defer deferClose("decrypt -> closing decWrtr", decWrtr.Close)
		defer wg.Done()
		var err error = nil
		var cnt int
		var blk cryptors.CypherBlock
		encText := make([]byte, 0)
		aRdr := filters.FromAscii85(bRdr)

		for err != io.EOF {
			b := make([]byte, 1024, 1024)
			cnt, err = aRdr.Read(b)
			log.Printf("decrypt -> aRdr.Read: cnt: %d, err: %v\n", cnt, err)
			checkFatal(err)

			if err != io.EOF {
				encText = append(encText, b[:cnt]...)
				log.Printf("decrypt -> encText.outer %d", len(encText))

				for len(encText) >= cryptors.CypherBlockBytes+1 {
					blk = *decodeCypherBlock(encText[:cryptors.CypherBlockBytes+1])
					leftMost <- blk
					blk = <-rightMost
					cnt, e := decWrtr.Write(blk.CypherBlock[:blk.Length])
					log.Printf("decrypt -> decWrtr.Write: cnt: %d, err: %v\n", cnt, e)
					checkFatal(e)
					pt := make([]byte, 0)
					pt = append(pt, encText[cryptors.CypherBlockBytes+1:]...)
					encText = pt
					log.Printf("decrypt -> encText.inner %d", len(encText))
				}
			}
		}
	}()

	aRdr := filters.FromFlate(decRdr)
	cnt, err := io.Copy(fout, aRdr)
	log.Printf("decrypt -> io.Copy: cnt: %d, err: %v\n", cnt, err)
	wg.Wait()
}

func readCounterFile(defaultMap map[string]*big.Int) map[string]*big.Int {
	defer un(trace("readCounterFile"))
	f, err := os.OpenFile(cntrFileName, os.O_RDONLY, 0600)

	if err != nil {
		log.Printf("%s.  It will be created.\n", err)
		log.Printf("returned map: %v\n", defaultMap)
		return defaultMap
	}

	defer deferClose("Closing tnt2 map file", f.Close)
	cmap := make(map[string]*big.Int)
	dec := json.NewDecoder(f)
	checkFatal(dec.Decode(&cmap))
	log.Printf("returned map: %v\n", cMap)
	return cmap
}

func writeCounterFile(wMap map[string]*big.Int) error {
	defer un(trace("writeCounterFile"))
	f, err := os.OpenFile(cntrFileName, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0600)

	if err != nil {
		return err
	}

	defer deferClose("Closing tnt2 map file", f.Close)
	log.Printf("Map to write: %v\n", wMap)
	e := json.NewEncoder(f)
	e.SetIndent("", "    ")
	return e.Encode(wMap)
}

func main() {
	for _, machine := range tntMachine {
		switch t := machine.(type) {
		default:
			log.Print(t)
		case *rotor.Rotor:
			log.Print("Rotor")
		case *permutator.Permutator:
			log.Print("Permutator")
		case *cryptors.Counter:
			log.Print("counter")
		}
	}

	if encode {
		encrypt()
		cMap[mKey] = tntMachine[len(tntMachine)-1].GetIndex()
		log.Printf("key: %s\nUpdated map: %v", mKey, cMap)
		checkFatal(writeCounterFile(cMap))
	} else if decode {
		decrypt()
	}
}
