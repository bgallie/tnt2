// tnt2 project main.go
// tnt2 is an implementation of the "Infinite Key Ecryption" system from the
// Dr. Dobbs Journal artical.

package main

import (
	"bufio"
	"encoding/ascii85"
	"encoding/json"
	"flag"
	"fmt"
	"io"
	"math/big"
	"os"
	"os/user"
	"sync"

	"github.com/bgallie/filters"
	"github.com/bgallie/jc1"
	"github.com/bgallie/tnt2/cryptors"
	"github.com/bgallie/tnt2/cryptors/permutator"
	"github.com/bgallie/tnt2/cryptors/rotor"
	"github.com/bgallie/utilities"
)

const (
	Tnt2Comment   = "TNT2 Encrypted Data"
	Tnt2Name      = "os.Stdin"
	Tnt2CountFile = ".tnt2"
	usage         = "tnt2 [[-decode | -d] | [-encode | -e]] <inputfile >outputfile"
)

var (
	encode          bool // Flag: True to encode, False to decode
	decode          bool // Flag: True to decode, False to encode
	rotor1          *rotor.Rotor
	rotor2          *rotor.Rotor
	rotor3          *rotor.Rotor
	rotor4          *rotor.Rotor
	rotor5          *rotor.Rotor
	rotor6          *rotor.Rotor
	permutator1     *permutator.Permutator
	permutator2     *permutator.Permutator
	counter         *cryptors.Counter = new(cryptors.Counter)
	proFormaMachine []cryptors.Crypter
	tntMachine      []cryptors.Crypter
	rotorSizes      []int
	rotorSizesIndex int
	cycleSizes      []int
	cycleSizesIndex int
	key             *jc1.UberJc1
	mKey            string
	iCnt            *big.Int
	logIt           bool
	cMap            map[string]*big.Int
	nullFile        *os.File
	cntrFileName    string
	un              = utilities.Un
	trace           = utilities.Trace
	deferClose      = utilities.DeferClose
	checkFatal      = utilities.CheckFatal
	turnOffLogging  = utilities.TurnOffLogging
	turnOnLogging   = utilities.TurnOnLogging
)

func init() {
	// Parse the command line arguments.
	var cnt string
	flag.StringVar(&cnt, "count", "0", "initial count")
	flag.StringVar(&cnt, "c", "0", "initial count (shorthand)")
	flag.BoolVar(&encode, "encode", false, "encrypt data")
	flag.BoolVar(&encode, "e", false, "encrypt data (shorthand)")
	flag.BoolVar(&decode, "decode", false, "decrypt data")
	flag.BoolVar(&decode, "d", false, "decrypt data (shorthand)")
	flag.BoolVar(&logIt, "log", false, "turn logging on")
	flag.BoolVar(&logIt, "l", false, "turn logging on (shorthand)")
	flag.Parse()

	if (encode && decode) || !(encode || decode) {
		fmt.Fprintln(os.Stderr, "You must select one of -encode or -decode")
		fmt.Fprintln(os.Stderr, usage)
		flag.PrintDefaults()
		os.Exit(1)
	}

	if flag.NArg() == 0 {
		secret, exists := os.LookupEnv("tnt2Secret")
		if exists {
			key = jc1.NewUberJc1([]byte(secret))
		} else {
			fmt.Fprintln(os.Stderr, "You must supply a password.")
		}
	} else {
		key = jc1.NewUberJc1([]byte(flag.Arg(0)))
	}

	if !logIt {
		turnOffLogging()
	}

	u, err := user.Current()
	checkFatal(err)
	cntrFileName = fmt.Sprintf("%s%c%s", u.HomeDir, os.PathSeparator, Tnt2CountFile)
	// Get a 'checksum' of the encryption key.  This is used as a key to store
	// the number of blocks encrypted during the last session.
	var cksum [cryptors.CypherBlockBytes]byte
	var eCksum [int((cryptors.CypherBlockBytes / 4.0) * 5)]byte
	ascii85.Encode(eCksum[:], key.XORKeyStream(cksum[:]))
	mKey = string(eCksum[:])
	// Read in the map of counts from the file which holds the counts and get the count to use to encode the file.
	cMap = make(map[string]*big.Int)
	cMap = readCounterFile(cMap)

	if cMap[mKey] == nil {
		iCnt, _ = new(big.Int).SetString(cnt, 10)
		cMap[mKey] = iCnt
	} else {
		iCnt = cMap[mKey]
	}

	// Define a random order of rotor sizes based on the key.
	rotorSizes = key.Perm(len(cryptors.RotorSizes))
	// Define a random order of cycle sipzes based on the key.
	cycleSizes = key.Perm(len(cryptors.CycleSizes))
	cycleSizesIndex = int(key.Int32n(int32(len(cycleSizes))))
	// Create the proforma rotors and permentators used to create the actual rotors and permentators to use.
	rotor1 = rotor.New(7933, 6012, 1504, []byte{
		142, 65, 227, 194, 168, 226, 159, 35, 200, 122, 28, 19, 8, 10, 100, 233,
		250, 76, 253, 107, 18, 34, 211, 70, 235, 38, 197, 101, 176, 224, 6, 73,
		209, 109, 25, 178, 152, 166, 2, 141, 191, 16, 126, 207, 180, 40, 58, 92,
		247, 4, 179, 23, 188, 229, 70, 50, 1, 177, 169, 218, 143, 52, 126, 42,
		81, 91, 222, 56, 254, 129, 215, 112, 3, 250, 99, 67, 208, 49, 86, 67,
		170, 39, 73, 236, 248, 20, 177, 136, 42, 102, 47, 166, 23, 98, 118, 228,
		228, 117, 157, 100, 61, 238, 168, 177, 208, 66, 74, 94, 169, 229, 195, 144,
		207, 117, 252, 185, 217, 168, 140, 125, 117, 12, 178, 160, 117, 181, 159, 136,
		71, 52, 74, 78, 165, 49, 20, 171, 10, 88, 182, 175, 169, 89, 133, 83,
		114, 47, 127, 103, 191, 97, 158, 17, 102, 188, 109, 23, 51, 190, 52, 69,
		104, 156, 254, 171, 158, 21, 68, 159, 207, 116, 126, 52, 34, 198, 87, 232,
		73, 176, 121, 234, 196, 170, 85, 118, 117, 51, 63, 244, 159, 186, 56, 35,
		23, 157, 150, 12, 137, 208, 112, 220, 20, 205, 244, 109, 16, 254, 103, 4,
		147, 59, 76, 102, 74, 179, 143, 191, 0, 222, 145, 135, 126, 17, 46, 119,
		117, 195, 156, 21, 197, 2, 91, 124, 219, 207, 34, 90, 140, 144, 241, 153,
		47, 213, 149, 238, 248, 246, 46, 208, 243, 65, 28, 99, 139, 42, 204, 36,
		48, 16, 188, 96, 37, 215, 240, 145, 169, 159, 85, 25, 145, 77, 222, 116,
		163, 119, 242, 198, 173, 21, 37, 76, 191, 189, 80, 226, 168, 239, 145, 239,
		240, 28, 111, 144, 161, 135, 160, 140, 142, 181, 173, 96, 222, 85, 64, 166,
		137, 168, 175, 236, 92, 102, 77, 69, 92, 177, 16, 170, 40, 187, 61, 202,
		247, 4, 25, 249, 127, 71, 189, 255, 108, 151, 9, 255, 82, 105, 209, 102,
		18, 89, 224, 249, 32, 84, 87, 134, 98, 226, 67, 115, 85, 61, 31, 55,
		114, 191, 109, 169, 137, 196, 177, 152, 136, 129, 178, 227, 204, 225, 249, 50,
		87, 244, 92, 192, 11, 130, 131, 5, 122, 37, 69, 211, 191, 136, 243, 102,
		58, 134, 47, 166, 233, 62, 228, 107, 197, 212, 242, 244, 44, 57, 181, 55,
		112, 44, 135, 10, 145, 104, 97, 58, 152, 56, 246, 203, 213, 131, 218, 51,
		77, 212, 79, 198, 40, 176, 1, 40, 83, 4, 230, 218, 254, 121, 165, 48,
		223, 237, 188, 122, 112, 250, 97, 219, 108, 194, 252, 155, 31, 147, 38, 83,
		195, 107, 85, 92, 32, 99, 150, 72, 14, 127, 123, 107, 127, 187, 179, 182,
		44, 21, 130, 74, 253, 232, 75, 163, 27, 109, 79, 78, 153, 20, 92, 46,
		207, 83, 234, 231, 60, 247, 182, 101, 152, 123, 16, 122, 160, 239, 78, 51,
		223, 166, 9, 127, 61, 44, 99, 206, 91, 90, 110, 8, 201, 230, 24, 212,
		157, 109, 145, 56, 86, 190, 173, 56, 22, 152, 54, 148, 60, 120, 250, 60,
		209, 96, 96, 95, 163, 229, 65, 109, 38, 181, 37, 33, 103, 44, 58, 69,
		209, 62, 194, 41, 106, 228, 108, 222, 104, 42, 223, 218, 139, 19, 187, 95,
		171, 204, 253, 45, 207, 25, 51, 163, 188, 226, 82, 125, 17, 104, 22, 226,
		163, 83, 205, 84, 186, 172, 97, 9, 60, 235, 178, 237, 164, 41, 215, 85,
		228, 189, 1, 242, 108, 28, 61, 19, 117, 169, 19, 225, 214, 65, 0, 189,
		190, 231, 143, 42, 220, 121, 106, 80, 197, 129, 155, 112, 142, 55, 0, 239,
		62, 213, 116, 79, 197, 243, 78, 252, 131, 153, 85, 18, 15, 7, 185, 85,
		44, 51, 74, 99, 80, 35, 102, 26, 218, 240, 17, 171, 26, 44, 190, 175,
		241, 170, 163, 237, 51, 39, 53, 241, 114, 38, 100, 18, 252, 124, 234, 183,
		212, 61, 182, 161, 132, 249, 191, 186, 99, 184, 26, 103, 222, 10, 163, 95,
		126, 252, 51, 126, 111, 15, 32, 11, 47, 132, 253, 218, 71, 59, 72, 96,
		234, 167, 94, 225, 95, 207, 46, 179, 106, 102, 253, 200, 146, 22, 19, 32,
		205, 213, 200, 51, 191, 73, 253, 181, 95, 3, 207, 211, 195, 185, 28, 44,
		228, 64, 100, 140, 7, 139, 105, 167, 148, 6, 231, 2, 177, 237, 183, 204,
		71, 118, 181, 0, 55, 246, 161, 59, 233, 28, 176, 46, 123, 122, 52, 157,
		241, 43, 143, 220, 59, 116, 88, 222, 31, 102, 246, 254, 84, 216, 109, 67,
		164, 209, 107, 58, 8, 255, 143, 220, 190, 112, 5, 80, 237, 120, 189, 173,
		107, 58, 201, 92, 194, 44, 233, 236, 159, 152, 160, 230, 214, 228, 58, 58,
		15, 81, 152, 84, 150, 109, 89, 234, 104, 206, 39, 233, 87, 2, 157, 26,
		131, 65, 8, 127, 18, 184, 220, 52, 160, 218, 66, 197, 240, 149, 74, 147,
		78, 128, 186, 246, 90, 32, 62, 184, 70, 191, 118, 200, 15, 175, 253, 130,
		43, 72, 125, 2, 192, 45, 175, 244, 42, 1, 6, 62, 179, 178, 145, 148,
		143, 85, 150, 228, 141, 128, 97, 5, 170, 44, 220, 148, 144, 243, 122, 101,
		162, 118, 50, 243, 192, 247, 54, 167, 6, 243, 121, 68, 165, 238, 244, 145,
		67, 112, 140, 235, 8, 237, 244, 136, 72, 210, 210, 87, 56, 34, 164, 188,
		253, 219, 186, 79, 111, 216, 202, 41, 214, 189, 200, 148, 245, 148, 172, 59,
		44, 72, 235, 229, 21, 233, 39, 38, 5, 77, 144, 40, 248, 48, 123, 187,
		65, 189, 116, 41, 203, 236, 178, 88, 179, 62, 60, 236, 4, 68, 129, 178,
		233, 242, 112, 73, 32, 15, 3, 148, 27, 99, 49, 239, 27, 169, 66, 151,
		157, 175, 204, 137, 56, 87, 106, 9, 101, 3, 184, 208, 6, 112, 36, 216,
		196, 52, 3, 87, 127, 39, 102, 237, 22, 92, 132, 110, 108, 50, 102, 158})

	rotor2 = rotor.New(7927, 7429, 4312, []byte{
		56, 48, 242, 51, 255, 231, 105, 194, 31, 159, 226, 245, 145, 234, 22, 133,
		180, 177, 104, 108, 214, 111, 203, 8, 132, 107, 123, 220, 247, 48, 87, 83,
		116, 129, 32, 75, 44, 112, 164, 210, 241, 35, 251, 120, 208, 66, 64, 25,
		11, 224, 209, 152, 67, 77, 114, 148, 172, 113, 55, 39, 16, 176, 65, 174,
		177, 121, 187, 195, 75, 91, 44, 171, 3, 146, 170, 239, 166, 131, 135, 57,
		248, 180, 30, 211, 113, 52, 7, 84, 105, 164, 206, 229, 231, 14, 205, 93,
		109, 74, 46, 200, 55, 144, 195, 201, 240, 68, 116, 232, 25, 8, 32, 90,
		29, 13, 75, 83, 19, 7, 168, 185, 131, 104, 184, 174, 70, 34, 17, 98,
		255, 203, 19, 19, 89, 205, 124, 231, 138, 155, 62, 70, 212, 42, 238, 75,
		211, 170, 218, 190, 68, 238, 220, 134, 117, 220, 185, 33, 222, 205, 81, 119,
		168, 232, 32, 239, 90, 93, 171, 29, 18, 164, 178, 82, 157, 48, 2, 92,
		181, 177, 5, 12, 46, 39, 178, 29, 52, 38, 53, 82, 119, 148, 239, 0,
		194, 153, 19, 52, 142, 94, 77, 219, 79, 15, 129, 36, 140, 233, 169, 116,
		54, 15, 190, 205, 157, 219, 59, 190, 209, 61, 71, 171, 91, 99, 29, 192,
		17, 189, 178, 139, 56, 69, 164, 199, 140, 137, 62, 201, 174, 37, 1, 95,
		39, 193, 179, 206, 52, 160, 141, 105, 127, 114, 224, 174, 198, 193, 117, 36,
		165, 182, 201, 157, 154, 119, 135, 147, 184, 53, 174, 8, 69, 23, 138, 49,
		120, 168, 226, 47, 20, 45, 214, 67, 106, 251, 230, 195, 236, 183, 236, 48,
		121, 203, 216, 234, 25, 75, 42, 246, 229, 153, 154, 59, 226, 0, 65, 251,
		115, 46, 247, 215, 24, 11, 200, 15, 207, 160, 239, 51, 81, 137, 160, 63,
		244, 120, 68, 31, 176, 27, 108, 165, 56, 76, 255, 193, 75, 8, 183, 173,
		118, 85, 253, 113, 13, 195, 38, 220, 13, 222, 117, 108, 234, 50, 40, 118,
		162, 54, 52, 112, 119, 101, 169, 188, 80, 7, 9, 75, 61, 22, 117, 7,
		189, 57, 83, 218, 210, 153, 3, 188, 197, 224, 113, 204, 182, 137, 215, 46,
		231, 57, 134, 35, 200, 234, 137, 173, 109, 160, 243, 211, 171, 165, 175, 10,
		13, 254, 73, 67, 210, 216, 246, 223, 183, 32, 216, 153, 182, 253, 196, 189,
		206, 232, 205, 159, 42, 251, 210, 186, 113, 176, 1, 79, 51, 249, 166, 147,
		79, 253, 7, 140, 129, 209, 44, 20, 201, 161, 85, 242, 82, 0, 19, 197,
		221, 96, 218, 99, 34, 77, 144, 116, 48, 19, 160, 4, 108, 184, 128, 82,
		232, 22, 45, 163, 252, 74, 0, 38, 108, 227, 123, 105, 206, 15, 117, 174,
		102, 132, 203, 236, 23, 252, 156, 54, 139, 183, 136, 153, 183, 146, 223, 10,
		5, 186, 171, 108, 246, 89, 4, 133, 135, 181, 199, 57, 177, 224, 176, 236,
		77, 77, 201, 28, 142, 156, 173, 44, 85, 109, 254, 123, 103, 105, 254, 226,
		162, 205, 238, 233, 158, 21, 8, 108, 36, 84, 98, 180, 203, 113, 114, 195,
		151, 227, 247, 227, 228, 79, 1, 7, 77, 232, 78, 238, 155, 149, 28, 142,
		237, 196, 112, 99, 149, 87, 204, 162, 80, 114, 230, 86, 57, 77, 161, 111,
		200, 148, 169, 79, 113, 16, 191, 238, 125, 154, 86, 95, 42, 155, 105, 16,
		253, 254, 119, 184, 243, 231, 174, 65, 182, 36, 176, 3, 229, 12, 143, 107,
		80, 3, 237, 88, 26, 159, 201, 99, 158, 135, 24, 243, 230, 176, 62, 25,
		242, 173, 231, 122, 76, 245, 217, 72, 236, 253, 16, 100, 22, 207, 181, 25,
		17, 174, 44, 141, 6, 33, 133, 60, 116, 204, 217, 146, 136, 27, 7, 125,
		25, 130, 55, 63, 229, 123, 0, 121, 80, 247, 62, 162, 6, 53, 180, 23,
		211, 82, 209, 249, 102, 32, 192, 113, 53, 161, 218, 191, 153, 219, 248, 105,
		83, 75, 107, 179, 90, 106, 12, 58, 81, 97, 82, 58, 128, 147, 158, 71,
		127, 205, 145, 59, 41, 155, 201, 209, 87, 57, 147, 69, 228, 205, 39, 61,
		25, 129, 139, 16, 192, 140, 166, 104, 163, 232, 103, 125, 240, 138, 162, 236,
		45, 80, 224, 111, 112, 2, 59, 206, 92, 105, 45, 181, 101, 49, 35, 201,
		197, 98, 28, 150, 97, 73, 225, 224, 126, 61, 182, 23, 146, 87, 43, 253,
		215, 176, 118, 76, 57, 237, 89, 81, 149, 82, 209, 211, 143, 192, 44, 222,
		119, 147, 219, 190, 5, 65, 16, 184, 94, 62, 174, 186, 59, 126, 173, 220,
		209, 132, 74, 41, 233, 93, 76, 222, 10, 59, 255, 37, 186, 93, 194, 83,
		61, 42, 230, 132, 203, 243, 89, 124, 249, 85, 131, 141, 32, 79, 37, 104,
		214, 154, 156, 95, 172, 42, 245, 230, 37, 48, 104, 208, 99, 47, 81, 133,
		77, 190, 135, 82, 208, 120, 88, 215, 176, 246, 170, 201, 66, 172, 114, 71,
		83, 7, 254, 189, 75, 205, 219, 163, 246, 214, 171, 102, 207, 147, 204, 130,
		119, 27, 49, 24, 215, 237, 65, 106, 178, 3, 39, 235, 236, 55, 112, 104,
		222, 122, 28, 60, 44, 14, 153, 23, 224, 60, 34, 112, 240, 57, 135, 150,
		156, 30, 23, 102, 232, 238, 181, 126, 39, 123, 184, 169, 226, 177, 15, 204,
		48, 231, 178, 143, 66, 165, 199, 80, 108, 187, 52, 21, 42, 56, 38, 114,
		101, 250, 129, 27, 111, 130, 102, 2, 76, 202, 83, 191, 75, 76, 58, 21,
		185, 139, 92, 30, 160, 151, 90, 93, 167, 29, 117, 217, 202, 193, 212, 251,
		229, 197, 216, 72, 47, 204, 242, 28, 241, 55, 249, 150, 225, 164, 43, 167,
		125, 107, 103, 212, 216, 214, 199, 42, 160, 235, 42, 240, 151, 134, 1, 215,
		213, 226, 167, 134, 44, 137, 57, 54, 86, 16, 148, 222, 10, 57, 174, 7})

	rotor3 = rotor.New(7919, 2059, 4088, []byte{
		128, 10, 147, 110, 190, 63, 213, 184, 110, 139, 229, 40, 52, 155, 196, 227,
		159, 131, 173, 245, 126, 52, 124, 146, 139, 73, 227, 129, 181, 64, 189, 175,
		232, 184, 228, 96, 16, 162, 202, 202, 106, 120, 56, 133, 46, 220, 49, 157,
		150, 135, 84, 152, 72, 174, 195, 25, 191, 40, 66, 39, 142, 138, 114, 12,
		107, 2, 216, 135, 180, 142, 59, 86, 221, 78, 78, 79, 108, 64, 143, 197,
		177, 240, 64, 237, 47, 84, 186, 250, 127, 226, 71, 227, 92, 155, 46, 231,
		101, 32, 221, 120, 16, 16, 4, 187, 61, 227, 183, 251, 215, 173, 193, 221,
		244, 105, 226, 33, 222, 179, 106, 180, 230, 167, 204, 147, 131, 2, 168, 213,
		220, 53, 139, 231, 252, 165, 110, 233, 152, 160, 18, 136, 103, 254, 166, 115,
		244, 90, 157, 206, 7, 155, 71, 108, 192, 233, 135, 82, 3, 195, 25, 152,
		0, 197, 123, 13, 91, 136, 157, 87, 9, 26, 6, 255, 81, 236, 87, 167,
		50, 151, 71, 111, 170, 86, 127, 236, 229, 173, 177, 154, 137, 123, 110, 77,
		114, 83, 246, 80, 104, 102, 95, 38, 0, 229, 122, 64, 48, 145, 61, 3,
		39, 190, 136, 192, 127, 44, 71, 164, 86, 195, 232, 113, 140, 14, 216, 163,
		100, 133, 203, 238, 199, 244, 110, 108, 122, 56, 48, 234, 185, 186, 174, 86,
		56, 64, 63, 70, 172, 126, 143, 63, 60, 17, 223, 99, 5, 228, 39, 192,
		248, 155, 143, 53, 147, 240, 101, 18, 204, 224, 40, 220, 87, 58, 247, 201,
		45, 184, 192, 153, 108, 172, 85, 154, 183, 36, 36, 38, 208, 146, 67, 133,
		200, 22, 154, 210, 111, 203, 136, 232, 103, 254, 187, 109, 140, 38, 166, 37,
		220, 164, 193, 76, 109, 157, 227, 8, 61, 110, 112, 225, 153, 131, 86, 126,
		229, 23, 93, 212, 178, 224, 48, 171, 212, 209, 148, 76, 103, 118, 253, 12,
		241, 152, 118, 218, 162, 234, 136, 98, 158, 156, 213, 105, 220, 162, 150, 5,
		85, 175, 49, 96, 176, 68, 242, 46, 15, 211, 187, 129, 186, 153, 58, 222,
		181, 72, 8, 32, 26, 55, 232, 92, 237, 12, 165, 132, 175, 56, 191, 115,
		193, 40, 228, 7, 2, 224, 30, 9, 12, 3, 197, 252, 192, 252, 160, 238,
		24, 11, 213, 176, 41, 14, 255, 13, 209, 206, 14, 198, 82, 150, 244, 95,
		100, 157, 100, 36, 10, 243, 235, 170, 88, 222, 232, 3, 90, 202, 128, 230,
		86, 197, 227, 238, 146, 89, 116, 3, 159, 132, 152, 35, 141, 60, 107, 141,
		51, 127, 149, 60, 118, 65, 187, 188, 51, 24, 166, 66, 110, 69, 106, 234,
		20, 106, 181, 34, 6, 224, 56, 118, 66, 63, 102, 240, 23, 20, 116, 142,
		62, 168, 61, 158, 95, 213, 65, 12, 21, 240, 10, 8, 67, 223, 0, 45,
		18, 117, 173, 184, 55, 224, 101, 233, 212, 99, 180, 45, 223, 128, 99, 193,
		84, 195, 180, 80, 24, 41, 87, 143, 73, 196, 5, 139, 215, 92, 199, 220,
		142, 207, 246, 253, 254, 72, 128, 30, 89, 75, 239, 78, 76, 115, 28, 122,
		201, 107, 84, 115, 32, 111, 72, 8, 246, 243, 78, 210, 234, 240, 40, 219,
		29, 92, 66, 212, 146, 141, 210, 186, 235, 68, 131, 196, 221, 209, 86, 73,
		58, 93, 137, 103, 57, 20, 145, 180, 49, 70, 103, 165, 64, 158, 112, 125,
		53, 75, 32, 157, 70, 31, 107, 152, 185, 215, 162, 18, 50, 13, 53, 60,
		154, 6, 235, 242, 106, 199, 184, 46, 51, 37, 73, 177, 58, 75, 238, 17,
		63, 81, 172, 241, 39, 7, 12, 234, 59, 99, 0, 135, 93, 157, 25, 233,
		71, 24, 13, 17, 32, 215, 174, 251, 68, 115, 24, 217, 202, 11, 2, 65,
		225, 71, 43, 102, 71, 83, 48, 158, 219, 98, 0, 92, 8, 20, 250, 190,
		232, 184, 76, 108, 197, 210, 196, 250, 92, 197, 36, 150, 140, 182, 17, 211,
		205, 39, 90, 212, 213, 149, 103, 193, 89, 48, 145, 202, 189, 186, 162, 105,
		4, 198, 228, 115, 251, 94, 196, 116, 163, 35, 244, 36, 52, 195, 132, 170,
		42, 46, 206, 82, 145, 222, 3, 145, 103, 226, 136, 113, 115, 98, 183, 79,
		75, 134, 38, 136, 42, 242, 37, 6, 239, 8, 107, 162, 68, 214, 248, 63,
		221, 113, 140, 106, 179, 129, 150, 102, 96, 49, 84, 212, 167, 212, 15, 144,
		45, 230, 47, 132, 0, 21, 122, 185, 241, 170, 233, 3, 61, 121, 222, 98,
		140, 101, 14, 106, 216, 159, 203, 24, 232, 39, 242, 254, 194, 244, 159, 153,
		205, 128, 152, 6, 151, 114, 184, 26, 41, 117, 98, 161, 191, 245, 99, 196,
		186, 155, 63, 202, 41, 35, 60, 218, 211, 40, 171, 212, 106, 165, 18, 204,
		136, 87, 101, 105, 1, 104, 255, 246, 10, 24, 224, 25, 126, 250, 226, 62,
		94, 119, 65, 74, 161, 49, 43, 208, 30, 222, 194, 187, 18, 9, 132, 27,
		77, 193, 112, 178, 153, 169, 243, 210, 253, 58, 42, 133, 237, 22, 134, 122,
		252, 128, 141, 17, 159, 229, 84, 33, 213, 183, 95, 208, 147, 210, 166, 99,
		215, 123, 43, 197, 20, 55, 200, 106, 130, 95, 161, 241, 167, 97, 100, 108,
		67, 93, 220, 218, 201, 167, 62, 196, 41, 243, 225, 226, 154, 62, 167, 230,
		248, 111, 90, 117, 145, 193, 195, 11, 158, 97, 159, 227, 117, 110, 244, 129,
		147, 169, 187, 131, 150, 97, 15, 80, 253, 87, 231, 87, 32, 196, 168, 139,
		20, 184, 12, 36, 98, 109, 222, 250, 213, 132, 138, 30, 254, 137, 212, 157,
		30, 236, 22, 94, 114, 92, 184, 46, 62, 154, 6, 206, 153, 67, 149, 223,
		145, 239, 101, 23, 240, 224, 159, 124, 26, 41, 58, 55, 192, 102, 1, 168,
		17, 107, 36, 183, 129, 118, 157, 246, 200, 248, 193, 4, 244, 132, 149, 207})

	rotor4 = rotor.New(7907, 3955, 425, []byte{
		29, 54, 15, 84, 158, 46, 249, 136, 96, 131, 33, 54, 123, 244, 130, 209,
		150, 233, 140, 49, 253, 65, 136, 159, 45, 244, 71, 1, 116, 83, 239, 40,
		158, 78, 254, 203, 54, 211, 6, 2, 198, 15, 125, 33, 22, 26, 21, 164,
		114, 119, 151, 41, 121, 207, 229, 221, 38, 228, 55, 119, 2, 50, 71, 12,
		132, 202, 127, 72, 148, 34, 44, 22, 244, 77, 224, 81, 84, 28, 191, 216,
		120, 132, 59, 45, 203, 103, 82, 5, 165, 34, 102, 113, 38, 179, 214, 233,
		20, 63, 180, 207, 25, 149, 0, 236, 254, 25, 144, 172, 51, 84, 80, 58,
		138, 165, 114, 134, 232, 63, 76, 68, 177, 127, 163, 126, 14, 193, 19, 190,
		250, 156, 107, 252, 120, 228, 200, 81, 135, 5, 99, 164, 240, 235, 79, 55,
		16, 32, 87, 219, 175, 112, 193, 239, 152, 140, 151, 208, 225, 121, 0, 176,
		96, 105, 87, 201, 97, 143, 94, 60, 0, 253, 57, 93, 221, 221, 98, 174,
		249, 99, 69, 196, 214, 16, 200, 52, 115, 152, 16, 7, 220, 44, 167, 234,
		249, 210, 97, 238, 84, 246, 151, 170, 147, 255, 127, 238, 77, 96, 185, 197,
		71, 86, 51, 247, 29, 167, 31, 138, 80, 107, 82, 203, 160, 34, 92, 45,
		189, 116, 237, 153, 75, 76, 47, 12, 239, 31, 202, 78, 2, 0, 218, 38,
		46, 33, 71, 15, 98, 143, 50, 32, 186, 211, 183, 156, 123, 234, 112, 237,
		236, 235, 218, 237, 35, 25, 189, 28, 20, 51, 187, 53, 70, 161, 166, 128,
		98, 132, 144, 16, 157, 239, 52, 5, 141, 9, 171, 139, 95, 31, 202, 145,
		216, 155, 8, 1, 144, 100, 203, 195, 21, 175, 26, 103, 127, 97, 99, 154,
		12, 165, 25, 35, 73, 57, 201, 25, 31, 206, 5, 88, 123, 201, 103, 44,
		90, 235, 222, 157, 216, 102, 117, 226, 224, 56, 71, 173, 245, 43, 140, 139,
		151, 104, 83, 192, 250, 212, 165, 60, 38, 202, 175, 63, 91, 114, 107, 215,
		197, 159, 84, 187, 163, 5, 38, 68, 231, 58, 111, 0, 4, 15, 122, 12,
		211, 250, 78, 222, 183, 88, 243, 55, 46, 151, 205, 173, 150, 204, 219, 234,
		185, 169, 112, 0, 240, 222, 3, 162, 17, 217, 55, 228, 162, 214, 19, 206,
		142, 152, 76, 99, 55, 210, 251, 148, 201, 160, 109, 19, 113, 210, 41, 187,
		50, 22, 239, 139, 115, 218, 197, 120, 130, 250, 99, 255, 200, 158, 200, 218,
		227, 136, 108, 106, 89, 98, 248, 204, 81, 124, 27, 138, 17, 27, 123, 97,
		156, 67, 3, 8, 245, 100, 149, 76, 139, 39, 166, 252, 83, 37, 29, 59,
		58, 174, 54, 123, 197, 194, 29, 194, 146, 150, 78, 203, 85, 142, 188, 197,
		55, 197, 66, 119, 82, 14, 93, 27, 48, 74, 179, 154, 67, 38, 30, 213,
		251, 186, 172, 127, 208, 200, 190, 245, 47, 92, 23, 201, 255, 219, 100, 224,
		159, 243, 14, 94, 152, 173, 245, 175, 184, 49, 80, 43, 247, 245, 144, 50,
		173, 221, 205, 177, 222, 68, 213, 215, 13, 88, 203, 254, 158, 24, 160, 89,
		249, 19, 46, 107, 11, 78, 125, 211, 133, 227, 234, 126, 155, 105, 74, 106,
		91, 245, 174, 78, 119, 165, 75, 10, 167, 174, 42, 138, 218, 102, 59, 159,
		122, 205, 105, 169, 222, 31, 153, 157, 158, 178, 50, 67, 38, 239, 203, 139,
		64, 70, 69, 106, 185, 21, 218, 127, 137, 116, 199, 198, 157, 65, 125, 60,
		124, 43, 125, 3, 109, 165, 218, 65, 247, 170, 95, 2, 71, 185, 251, 117,
		155, 37, 70, 177, 196, 157, 162, 250, 61, 70, 59, 240, 53, 240, 53, 87,
		98, 33, 126, 156, 45, 52, 64, 68, 158, 177, 4, 63, 28, 31, 95, 48,
		226, 186, 10, 184, 20, 217, 147, 247, 155, 183, 92, 84, 248, 18, 87, 213,
		23, 75, 189, 23, 249, 112, 159, 101, 185, 190, 126, 207, 217, 228, 66, 52,
		101, 237, 191, 194, 196, 100, 28, 66, 221, 80, 98, 59, 41, 65, 30, 54,
		124, 132, 81, 69, 39, 226, 7, 167, 125, 143, 36, 84, 165, 194, 32, 182,
		82, 78, 99, 224, 89, 27, 49, 128, 11, 210, 242, 13, 209, 61, 48, 87,
		222, 229, 9, 84, 74, 245, 159, 120, 143, 203, 185, 222, 172, 38, 249, 66,
		64, 162, 184, 29, 11, 74, 124, 24, 240, 85, 60, 211, 153, 95, 83, 155,
		173, 158, 247, 180, 40, 126, 77, 30, 128, 190, 196, 17, 3, 160, 249, 212,
		59, 162, 103, 216, 198, 80, 39, 132, 80, 22, 221, 176, 237, 219, 197, 129,
		78, 196, 1, 207, 70, 83, 200, 48, 14, 128, 150, 46, 135, 136, 230, 178,
		144, 249, 244, 91, 156, 218, 136, 20, 14, 247, 94, 103, 227, 159, 250, 233,
		71, 15, 167, 22, 88, 109, 18, 205, 154, 100, 174, 169, 185, 142, 192, 244,
		198, 183, 114, 116, 98, 107, 191, 67, 172, 26, 46, 126, 60, 143, 153, 75,
		248, 95, 120, 99, 64, 150, 142, 156, 222, 157, 108, 15, 16, 59, 160, 12,
		113, 146, 174, 2, 181, 153, 80, 8, 166, 34, 64, 11, 243, 189, 12, 129,
		119, 84, 84, 114, 8, 148, 215, 68, 93, 128, 6, 80, 118, 254, 238, 132,
		85, 231, 160, 230, 179, 180, 70, 199, 7, 91, 197, 178, 133, 135, 141, 149,
		241, 51, 120, 226, 88, 109, 83, 66, 208, 90, 80, 225, 97, 229, 216, 214,
		205, 177, 70, 107, 247, 11, 93, 131, 50, 144, 8, 165, 192, 44, 236, 236,
		111, 31, 213, 37, 190, 71, 135, 9, 189, 192, 110, 11, 65, 177, 243, 46,
		8, 189, 128, 194, 25, 27, 2, 229, 174, 136, 91, 254, 124, 239, 175, 251,
		195, 96, 60, 15, 0, 169, 168, 59, 129, 97, 192, 74, 211, 49, 218, 115,
		191, 99, 79, 157, 112, 185, 245, 48, 66, 198, 154, 225, 66, 52, 62, 219})

	rotor5 = rotor.New(7901, 4924, 2937, []byte{
		161, 253, 84, 64, 134, 45, 47, 40, 130, 229, 140, 211, 148, 105, 221, 44,
		93, 161, 11, 12, 62, 136, 163, 44, 231, 91, 50, 211, 182, 157, 140, 104,
		138, 113, 171, 112, 19, 201, 20, 66, 252, 20, 23, 179, 24, 170, 130, 191,
		78, 40, 42, 101, 0, 194, 125, 86, 10, 239, 209, 190, 183, 88, 3, 87,
		18, 178, 239, 246, 71, 160, 98, 4, 134, 4, 232, 212, 82, 153, 145, 138,
		246, 209, 78, 133, 55, 67, 183, 95, 225, 180, 230, 161, 213, 137, 138, 116,
		110, 56, 225, 194, 244, 25, 51, 99, 200, 77, 213, 95, 86, 25, 56, 169,
		145, 220, 110, 2, 247, 125, 235, 92, 28, 144, 99, 166, 49, 42, 130, 225,
		74, 174, 113, 30, 95, 197, 12, 180, 97, 134, 166, 144, 233, 209, 27, 225,
		96, 51, 66, 62, 22, 232, 162, 186, 60, 126, 67, 65, 42, 231, 46, 116,
		153, 90, 251, 222, 207, 173, 96, 103, 85, 136, 161, 166, 239, 204, 226, 186,
		3, 101, 220, 41, 195, 91, 92, 206, 19, 44, 50, 46, 112, 1, 38, 76,
		57, 94, 151, 145, 235, 194, 98, 105, 138, 66, 250, 145, 76, 33, 3, 138,
		231, 2, 243, 245, 169, 18, 76, 60, 14, 35, 145, 135, 233, 67, 16, 90,
		183, 152, 66, 90, 194, 184, 64, 65, 163, 255, 218, 230, 245, 94, 161, 144,
		150, 100, 50, 1, 120, 28, 228, 143, 125, 23, 27, 213, 136, 80, 176, 29,
		119, 213, 239, 212, 79, 88, 63, 132, 86, 95, 169, 93, 20, 76, 18, 51,
		15, 34, 81, 194, 112, 103, 188, 116, 77, 134, 213, 206, 188, 75, 101, 139,
		221, 84, 172, 56, 209, 21, 122, 172, 47, 154, 227, 51, 68, 107, 228, 9,
		73, 120, 252, 78, 94, 248, 118, 5, 178, 35, 8, 34, 147, 62, 144, 18,
		161, 83, 25, 216, 228, 44, 6, 251, 42, 31, 170, 247, 141, 38, 168, 214,
		89, 18, 91, 254, 30, 19, 172, 248, 11, 8, 199, 119, 74, 119, 127, 52,
		216, 72, 135, 55, 254, 50, 69, 204, 100, 137, 204, 109, 249, 67, 196, 250,
		55, 231, 211, 246, 172, 144, 229, 216, 55, 229, 74, 222, 6, 160, 63, 71,
		32, 207, 60, 13, 166, 13, 16, 24, 13, 114, 66, 75, 225, 1, 128, 190,
		158, 81, 240, 18, 59, 115, 65, 193, 246, 146, 233, 103, 150, 56, 185, 179,
		55, 178, 184, 238, 132, 61, 158, 144, 93, 110, 25, 236, 93, 209, 241, 224,
		5, 170, 201, 86, 149, 0, 242, 151, 145, 91, 211, 191, 44, 127, 91, 132,
		236, 240, 188, 255, 89, 17, 100, 188, 177, 182, 142, 209, 177, 1, 125, 171,
		145, 178, 179, 200, 160, 10, 250, 196, 33, 87, 30, 1, 50, 12, 23, 198,
		167, 69, 51, 234, 131, 183, 67, 114, 74, 88, 170, 25, 159, 194, 236, 220,
		209, 95, 180, 222, 115, 100, 251, 89, 205, 133, 28, 184, 173, 59, 20, 107,
		20, 70, 219, 28, 174, 134, 189, 100, 31, 13, 187, 229, 87, 171, 237, 82,
		83, 186, 15, 241, 183, 82, 26, 238, 96, 126, 151, 20, 83, 61, 128, 227,
		102, 57, 6, 57, 68, 208, 242, 252, 92, 139, 41, 255, 170, 94, 214, 79,
		73, 26, 54, 67, 81, 233, 65, 14, 122, 77, 167, 137, 93, 16, 69, 193,
		116, 187, 213, 233, 46, 188, 71, 3, 102, 254, 167, 133, 113, 24, 67, 242,
		11, 34, 110, 136, 205, 232, 41, 46, 138, 16, 126, 78, 230, 9, 56, 222,
		121, 188, 222, 42, 191, 239, 117, 12, 192, 50, 174, 60, 215, 97, 181, 145,
		62, 193, 131, 131, 95, 158, 44, 110, 239, 55, 46, 72, 136, 105, 15, 123,
		182, 216, 57, 230, 132, 118, 54, 74, 216, 204, 176, 49, 248, 27, 174, 180,
		229, 175, 111, 147, 59, 52, 218, 8, 242, 145, 131, 226, 220, 38, 195, 33,
		63, 255, 142, 129, 5, 201, 34, 74, 2, 152, 210, 81, 191, 119, 46, 105,
		135, 252, 19, 168, 55, 75, 92, 192, 91, 221, 84, 225, 97, 253, 141, 20,
		69, 239, 135, 109, 4, 201, 164, 107, 107, 255, 174, 75, 200, 232, 8, 0,
		5, 242, 237, 51, 20, 175, 233, 160, 250, 13, 55, 8, 148, 72, 71, 180,
		33, 16, 65, 74, 67, 135, 191, 184, 228, 105, 22, 177, 45, 192, 151, 136,
		86, 78, 9, 5, 128, 77, 176, 53, 233, 83, 19, 202, 192, 65, 88, 52,
		25, 206, 50, 127, 150, 34, 212, 48, 190, 212, 71, 3, 70, 29, 121, 61,
		197, 43, 20, 78, 16, 106, 238, 46, 219, 126, 121, 169, 118, 253, 250, 188,
		247, 236, 99, 235, 132, 217, 153, 102, 32, 218, 141, 32, 114, 181, 101, 53,
		65, 2, 32, 33, 24, 30, 3, 206, 173, 172, 128, 190, 53, 226, 126, 214,
		234, 36, 254, 132, 168, 168, 56, 249, 255, 0, 148, 141, 58, 42, 66, 173,
		133, 0, 173, 143, 153, 151, 126, 162, 145, 225, 82, 143, 171, 24, 196, 144,
		98, 90, 214, 33, 225, 111, 147, 129, 42, 46, 202, 85, 132, 82, 66, 0,
		26, 234, 203, 198, 155, 153, 34, 206, 80, 124, 61, 45, 63, 147, 48, 169,
		122, 71, 232, 226, 205, 31, 17, 69, 255, 139, 9, 213, 104, 150, 9, 38,
		71, 102, 163, 175, 118, 149, 51, 23, 208, 125, 70, 242, 134, 80, 250, 187,
		67, 94, 48, 125, 26, 190, 51, 209, 189, 117, 10, 22, 56, 113, 246, 105,
		217, 78, 239, 196, 232, 184, 49, 114, 171, 128, 155, 71, 95, 121, 54, 15,
		105, 118, 252, 16, 144, 177, 109, 184, 179, 32, 235, 206, 183, 100, 165, 32,
		162, 244, 102, 74, 7, 105, 27, 23, 144, 106, 77, 233, 142, 118, 49, 216,
		110, 12, 30, 150, 184, 34, 49, 77, 108, 134, 56, 26, 78, 168, 105, 27,
		236, 116, 216, 96, 70, 111, 8, 251, 163, 87, 110, 188, 237, 135, 177, 204})

	rotor6 = rotor.New(7883, 2199, 931, []byte{
		79, 178, 233, 182, 153, 229, 252, 174, 243, 18, 183, 187, 173, 41, 208, 30,
		177, 101, 124, 67, 193, 41, 229, 24, 121, 231, 144, 145, 163, 218, 109, 146,
		235, 127, 98, 90, 25, 109, 253, 83, 238, 121, 2, 237, 219, 108, 70, 229,
		241, 124, 33, 2, 144, 28, 71, 251, 60, 56, 223, 35, 234, 151, 41, 255,
		235, 207, 124, 214, 106, 229, 19, 3, 242, 228, 79, 56, 37, 4, 113, 58,
		49, 66, 171, 21, 93, 7, 158, 244, 20, 64, 77, 189, 244, 13, 200, 82,
		128, 209, 101, 80, 96, 234, 64, 107, 35, 123, 80, 144, 241, 239, 15, 13,
		26, 114, 174, 242, 242, 251, 100, 191, 136, 185, 230, 42, 79, 166, 221, 251,
		86, 160, 31, 25, 227, 1, 146, 14, 224, 107, 38, 73, 161, 59, 237, 248,
		69, 236, 84, 165, 59, 147, 111, 222, 76, 248, 148, 65, 77, 238, 239, 226,
		200, 34, 227, 169, 244, 61, 80, 14, 110, 5, 101, 232, 206, 202, 235, 67,
		160, 173, 44, 125, 242, 96, 199, 249, 165, 242, 144, 64, 9, 242, 181, 161,
		89, 32, 88, 215, 117, 181, 235, 157, 254, 212, 62, 0, 225, 157, 182, 53,
		167, 100, 145, 121, 231, 233, 202, 218, 144, 47, 106, 240, 127, 27, 60, 96,
		91, 221, 74, 73, 10, 119, 199, 228, 215, 244, 151, 34, 67, 32, 153, 120,
		227, 16, 42, 123, 175, 155, 59, 225, 79, 67, 151, 87, 129, 50, 143, 212,
		80, 237, 91, 89, 37, 22, 8, 40, 218, 4, 93, 20, 194, 234, 128, 249,
		116, 97, 186, 251, 99, 53, 186, 236, 66, 95, 251, 201, 34, 118, 78, 40,
		131, 120, 142, 69, 189, 153, 240, 147, 236, 153, 103, 231, 129, 8, 88, 247,
		211, 106, 219, 42, 152, 63, 141, 233, 66, 37, 70, 146, 247, 166, 164, 215,
		212, 16, 3, 86, 127, 155, 11, 20, 113, 67, 193, 4, 8, 161, 72, 58,
		212, 103, 184, 153, 70, 46, 217, 63, 72, 157, 108, 95, 65, 202, 250, 186,
		224, 173, 123, 14, 211, 119, 226, 87, 68, 77, 243, 23, 191, 71, 116, 170,
		226, 116, 35, 198, 192, 184, 29, 75, 37, 49, 57, 18, 36, 5, 111, 218,
		219, 204, 193, 201, 244, 251, 6, 122, 129, 113, 105, 65, 98, 129, 181, 232,
		58, 46, 105, 96, 252, 114, 132, 142, 36, 147, 49, 56, 71, 152, 99, 171,
		223, 227, 145, 31, 191, 205, 254, 142, 230, 179, 208, 37, 103, 248, 226, 190,
		191, 49, 117, 36, 67, 239, 214, 124, 186, 144, 101, 196, 151, 136, 197, 119,
		96, 17, 197, 128, 237, 220, 138, 80, 231, 253, 101, 108, 83, 127, 225, 178,
		129, 208, 63, 141, 194, 227, 162, 120, 90, 244, 243, 36, 85, 48, 198, 104,
		214, 124, 40, 254, 206, 178, 60, 57, 200, 40, 244, 176, 105, 47, 125, 177,
		123, 49, 247, 239, 88, 225, 120, 220, 176, 110, 79, 76, 141, 94, 125, 109,
		81, 201, 158, 0, 114, 178, 7, 153, 111, 68, 40, 214, 70, 242, 135, 5,
		21, 117, 203, 236, 252, 228, 225, 5, 91, 33, 31, 132, 225, 174, 40, 127,
		215, 228, 200, 209, 53, 22, 172, 101, 163, 78, 37, 234, 180, 43, 215, 1,
		197, 247, 196, 93, 198, 223, 68, 179, 114, 244, 144, 92, 228, 158, 182, 69,
		153, 73, 88, 149, 87, 114, 186, 103, 115, 107, 200, 150, 89, 0, 46, 95,
		45, 4, 117, 254, 120, 231, 236, 226, 46, 56, 134, 100, 213, 32, 20, 33,
		250, 32, 189, 16, 132, 172, 184, 136, 119, 101, 217, 58, 64, 227, 220, 111,
		225, 149, 172, 180, 39, 95, 249, 207, 174, 35, 1, 89, 164, 82, 0, 137,
		232, 130, 62, 46, 253, 144, 221, 212, 83, 156, 162, 78, 242, 144, 75, 126,
		193, 222, 93, 96, 141, 148, 47, 14, 52, 237, 130, 1, 254, 37, 123, 42,
		103, 225, 33, 240, 252, 83, 238, 146, 232, 7, 36, 167, 185, 24, 54, 156,
		130, 85, 254, 38, 95, 84, 195, 115, 224, 113, 37, 6, 37, 240, 193, 129,
		173, 102, 143, 81, 236, 135, 68, 188, 102, 107, 210, 109, 64, 72, 228, 55,
		244, 12, 27, 81, 241, 172, 60, 198, 127, 40, 116, 238, 222, 239, 239, 51,
		116, 76, 163, 201, 37, 173, 107, 128, 110, 66, 122, 178, 52, 119, 34, 80,
		141, 109, 182, 243, 226, 234, 182, 122, 205, 167, 151, 54, 24, 109, 249, 91,
		36, 25, 36, 229, 198, 154, 111, 210, 131, 42, 123, 65, 99, 230, 132, 226,
		229, 194, 5, 167, 233, 104, 183, 161, 158, 239, 253, 35, 215, 59, 41, 205,
		219, 165, 194, 108, 74, 209, 66, 157, 240, 158, 213, 224, 71, 144, 39, 230,
		124, 138, 39, 131, 33, 49, 178, 154, 235, 200, 78, 187, 188, 252, 23, 130,
		30, 233, 10, 182, 209, 68, 163, 239, 212, 188, 126, 79, 247, 11, 35, 151,
		162, 26, 70, 139, 201, 107, 95, 64, 84, 51, 227, 119, 63, 19, 76, 88,
		45, 107, 28, 214, 108, 12, 212, 74, 123, 141, 1, 146, 29, 115, 234, 48,
		225, 106, 76, 72, 237, 224, 181, 113, 131, 16, 67, 30, 137, 29, 53, 177,
		192, 242, 152, 156, 168, 150, 205, 129, 130, 126, 87, 250, 14, 131, 25, 77,
		93, 70, 201, 63, 56, 55, 230, 90, 149, 255, 145, 159, 164, 205, 136, 36,
		102, 96, 164, 174, 78, 195, 69, 151, 11, 74, 209, 239, 209, 57, 165, 6,
		151, 100, 230, 102, 12, 176, 139, 72, 157, 252, 118, 17, 47, 188, 77, 227,
		52, 191, 167, 225, 175, 22, 25, 229, 144, 214, 95, 77, 102, 243, 124, 183,
		110, 38, 128, 217, 228, 51, 236, 36, 75, 185, 13, 146, 130, 212, 101, 158,
		51, 125, 4, 91, 232, 194, 109, 201, 61, 123, 99, 202, 0, 228, 235, 173,
		203, 205, 73, 82, 8, 252, 196, 230, 83, 192, 43, 30, 119, 41, 223, 175})

	permutator1 = permutator.New(cryptors.CycleSizes[1][:], []byte{
		248, 181, 196, 140, 239, 198, 53, 229, 222, 20, 255, 34, 118, 41, 127, 45,
		95, 174, 142, 115, 137, 132, 100, 121, 176, 187, 122, 199, 70, 9, 179, 7,
		43, 238, 113, 185, 249, 85, 59, 231, 4, 237, 139, 31, 128, 208, 82, 40,
		12, 226, 8, 223, 135, 131, 206, 6, 46, 194, 242, 188, 230, 218, 96, 98,
		101, 212, 233, 145, 37, 83, 153, 200, 130, 62, 110, 217, 51, 241, 192, 162,
		79, 171, 150, 105, 213, 144, 21, 106, 253, 88, 103, 42, 164, 10, 91, 138,
		123, 172, 15, 159, 44, 72, 1, 102, 99, 87, 97, 19, 125, 104, 36, 38,
		57, 120, 92, 178, 247, 22, 193, 76, 147, 157, 183, 5, 186, 55, 141, 30,
		158, 225, 81, 54, 236, 60, 13, 195, 66, 67, 112, 235, 126, 65, 136, 173,
		155, 149, 52, 73, 234, 114, 251, 154, 201, 48, 24, 124, 161, 129, 243, 227,
		108, 219, 189, 168, 107, 209, 23, 216, 210, 228, 134, 86, 215, 26, 163, 17,
		175, 250, 16, 170, 166, 160, 202, 165, 169, 61, 77, 75, 240, 182, 49, 90,
		197, 50, 190, 167, 58, 191, 109, 32, 35, 148, 146, 93, 151, 27, 224, 0,
		25, 68, 244, 203, 64, 143, 204, 47, 117, 94, 180, 71, 246, 89, 207, 214,
		111, 84, 156, 80, 232, 78, 177, 33, 116, 133, 211, 11, 14, 119, 56, 252,
		18, 63, 152, 3, 205, 2, 245, 254, 220, 29, 184, 69, 221, 39, 74, 28})

	permutator2 = permutator.New(cryptors.CycleSizes[2][:], []byte{
		39, 0, 64, 155, 252, 164, 162, 145, 86, 32, 88, 37, 67, 113, 235, 205,
		231, 141, 249, 31, 53, 202, 225, 161, 169, 236, 128, 91, 50, 82, 24, 85,
		204, 203, 197, 70, 9, 140, 124, 129, 4, 20, 186, 237, 152, 126, 198, 176,
		8, 71, 78, 100, 81, 172, 98, 156, 89, 120, 134, 27, 30, 47, 143, 142,
		117, 144, 102, 149, 14, 66, 60, 133, 239, 181, 243, 108, 94, 223, 217, 2,
		136, 195, 146, 99, 25, 23, 46, 200, 12, 59, 93, 18, 139, 240, 148, 230,
		92, 111, 199, 228, 74, 13, 159, 1, 123, 83, 103, 19, 255, 65, 118, 35,
		29, 10, 95, 38, 116, 253, 55, 171, 34, 80, 216, 241, 41, 246, 193, 106,
		5, 110, 247, 192, 187, 214, 174, 215, 222, 250, 79, 72, 227, 6, 180, 209,
		77, 68, 127, 158, 254, 75, 160, 190, 36, 44, 54, 178, 125, 166, 52, 170,
		43, 57, 165, 87, 109, 45, 233, 167, 196, 229, 211, 26, 104, 49, 248, 163,
		40, 11, 245, 168, 154, 61, 188, 101, 226, 184, 7, 121, 177, 175, 153, 219,
		51, 183, 173, 191, 157, 63, 84, 62, 56, 244, 107, 22, 218, 224, 114, 131,
		232, 33, 189, 42, 207, 69, 130, 15, 208, 97, 105, 112, 115, 48, 238, 16,
		251, 182, 234, 147, 119, 76, 151, 185, 242, 206, 96, 212, 201, 194, 213, 135,
		221, 28, 179, 220, 90, 150, 138, 137, 17, 132, 21, 122, 73, 210, 3, 58})
	// Create the proforma encryption machine.  The layout of the machine is:
	// 		rotor, rotor, permutator, rotor, rotor, permutator, rotor, rotor
	proFormaMachine = []cryptors.Crypter{rotor1, rotor2, permutator1, rotor3, rotor4, permutator2, rotor5, rotor6}
	leftMost, rightMost := cryptors.CreateEncryptMachine(cryptors.BigZero, proFormaMachine...)

	// Update the rotors and permutators in a very non-linear fashion.
	for _, machine := range proFormaMachine {
		switch v := machine.(type) {
		default:
			fmt.Fprintf(os.Stderr, "Unknown machine: %v\n", v)
		case *rotor.Rotor:
			updateRotor(machine.(*rotor.Rotor), leftMost, rightMost)
		case *permutator.Permutator:
			updatePermutator(machine.(*permutator.Permutator), leftMost, rightMost)
		case *cryptors.Counter:
			machine.(*cryptors.Counter).SetIndex(big.NewInt(0))
		}
	}

	// Update the tntMachine to change the order of rotors and permutators in a randon order.
	tntMachine = make([]cryptors.Crypter, 9, 9)
	// Scramble the order of the rotors and permutators
	tntOrder := key.Perm(8)

	for i, v := range tntOrder {
		tntMachine[i] = proFormaMachine[v]
	}

	tntMachine[8] = counter
}

func updateRotor(r *rotor.Rotor, left, right chan cryptors.CypherBlock) {
	var blk cryptors.CypherBlock
	blkSlice := blk.CypherBlock[:]
	copy(blkSlice, key.XORKeyStream(blkSlice))
	blk.Length = cryptors.CypherBlockBytes
	left <- blk
	blk = <-right
	rotorSize := cryptors.RotorSizes[rotorSizes[rotorSizesIndex]]
	rotorSizesIndex = (rotorSizesIndex + 1) % len(cryptors.RotorSizes)
	start := int(key.Int32n(int32(rotorSize)))
	step := int(key.Int32n(int32(rotorSize)))
	// var newRotor [cryptors.RotorSizeBytes]byte
	rotor := make([]byte, cryptors.RotorSizeBytes, cryptors.RotorSizeBytes) // newRotor[:0]
	blkCnt := cryptors.RotorSizeBytes / cryptors.CypherBlockBytes

	for i := 0; i < blkCnt; i++ {
		left <- blk
		blk = <-right
		rotor = append(rotor, blk.CypherBlock[:]...)
	}

	r.Update(rotorSize, start, step, rotor) // newRotor[:])
}

func updatePermutator(p *permutator.Permutator, left, right chan cryptors.CypherBlock) {
	var randp [cryptors.CypherBlockSize]byte
	var blk cryptors.CypherBlock
	blkSlice := blk.CypherBlock[:]
	copy(blkSlice, key.XORKeyStream(blkSlice))
	blk.Length = cryptors.CypherBlockBytes
	left <- blk
	blk = <-right

	// Create a table of byte values [0...255] in a random order
	randi := key.Perm(cryptors.CypherBlockSize)

	for idx, val := range randi {
		randp[idx] = byte(val)
	}

	// Chose a cryptors.CycleSizes and randomize order of the values
	length := len(cryptors.CycleSizes[cycleSizesIndex])
	cycles := make([]int, length, length)
	randi = key.Perm(length)

	for idx, val := range randi {
		cycles[idx] = cryptors.CycleSizes[cycleSizesIndex][val]
	}

	p.Update(cycles, randp[:])
	cycleSizesIndex = (cycleSizesIndex + 1) % len(cryptors.CycleSizes)
}

func encodeCypherBlock(blk cryptors.CypherBlock) []byte {
	b := make([]byte, 0, 0)
	b = append(b, byte(blk.Length))
	b = append(b, blk.CypherBlock[:]...)
	return b
}

func decodeCypherBlock(bytes []byte) *cryptors.CypherBlock {
	blk := new(cryptors.CypherBlock)
	blk.Length = int8(bytes[0])
	_ = copy(blk.CypherBlock[:], bytes[1:])
	return blk
}

func encrypt() {
	defer un(trace("encrypt"))
	encIn, encOut := io.Pipe()
	leftMost, rightMost := cryptors.CreateEncryptMachine(iCnt, tntMachine...)
	fin := os.Stdin
	fout := os.Stdout
	var wg sync.WaitGroup
	fout.WriteString(fmt.Sprintf("%s\n", iCnt))
	aIn := filters.ToAscii85(encIn)
	sIn := filters.SplitToLines(aIn)

	// Go routine to read the output from the encIn, encrypt it and
	// sends it to the ascii85.NewEncoder.
	wg.Add(1)
	go func() {
		defer wg.Done()
		defer deferClose("Closing encOut.", encOut.Close)
		defer un(trace("Go encIn -> encrypt -> ascii85.newEncoder"))
		flateIn := filters.ToFlate(fin)
		var err error
		var cnt int
		plainText := make([]byte, 0)

		for err != io.EOF {
			var blk cryptors.CypherBlock
			b := make([]byte, 1024, 1024)
			cnt, err = flateIn.Read(b)
			checkFatal(err)

			if err != io.EOF {
				plainText = append(plainText, b[:cnt]...)

				for len(plainText) >= cryptors.CypherBlockBytes {
					_ = copy(blk.CypherBlock[:], plainText)
					blk.Length = cryptors.CypherBlockBytes
					leftMost <- blk
					blk = <-rightMost
					cnt, err = encOut.Write([]byte(encodeCypherBlock(blk)))
					checkFatal(err)
					pt := make([]byte, 0)
					pt = append(pt, plainText[cryptors.CypherBlockBytes:]...)
					plainText = pt
				}
			} else if len(plainText) > 0 { // encrypt any remaining input.
				var e error
				blk.Length = int8(len(plainText))
				_ = copy(blk.CypherBlock[:], plainText[:blk.Length])
				blk.Length = int8(len(plainText))
				leftMost <- blk
				blk = <-rightMost
				cnt, e = encOut.Write([]byte(encodeCypherBlock(blk)))
				checkFatal(e)
			}
		}

		// shutdown the encryption machine.
		var blk cryptors.CypherBlock
		leftMost <- blk
		_ = <-rightMost
	}()

	// Read the output of encodeCypherBlock and send it to STDOUT.
	defer deferClose("Closing STDOUT", fout.Close)
	_, err := io.Copy(fout, sIn)
	checkFatal(err)
	wg.Wait()
}

func decrypt() {
	defer un(trace("decrypt"))
	fin := os.Stdin
	fout := os.Stdout
	defer deferClose("decrypt -> Closing STDOUT", fout.Close)
	bRdr := bufio.NewReader(fin)
	line, err := bRdr.ReadString('\n')

	if err == nil {
		iCnt, _ = new(big.Int).SetString(line[:len(line)-1], 10)
	}

	leftMost, rightMost := cryptors.CreateDecryptMachine(iCnt, tntMachine...)
	decRdr, decWrtr := io.Pipe()
	var wg sync.WaitGroup
	wg.Add(1)

	go func() {
		defer wg.Done()
		defer un(trace("decrypt -> CombineLines -> Ascii85Reader -> decryptEngine -> descOut"))
		defer deferClose("decrypt -> closing decWrtr", decWrtr.Close)
		var err error = nil
		var cnt int
		var blk cryptors.CypherBlock
		encText := make([]byte, 0)
		sRdr := filters.CombineLines(bRdr)
		aRdr := filters.FromAscii85(sRdr)

		for err != io.EOF {
			b := make([]byte, 1024, 1024)
			cnt, err = aRdr.Read(b)
			checkFatal(err)

			if err != io.EOF {
				encText = append(encText, b[:cnt]...)

				for len(encText) >= cryptors.CypherBlockBytes+1 {
					blk = *decodeCypherBlock(encText[:cryptors.CypherBlockBytes+1])
					leftMost <- blk
					blk = <-rightMost
					_, e := decWrtr.Write(blk.CypherBlock[:blk.Length])
					checkFatal(e)
					pt := make([]byte, 0)
					pt = append(pt, encText[cryptors.CypherBlockBytes+1:]...)
					encText = pt
				}
			}
		}
	}()

	aRdr := filters.FromFlate(decRdr)
	_, err = io.Copy(fout, aRdr)
	wg.Wait()
}

func readCounterFile(defaultMap map[string]*big.Int) map[string]*big.Int {
	defer un(trace("readCounterFile"))
	f, err := os.OpenFile(cntrFileName, os.O_RDONLY, 0600)

	if err != nil {
		return defaultMap
	}

	defer deferClose("Closing tnt2 map file", f.Close)
	cmap := make(map[string]*big.Int)
	dec := json.NewDecoder(f)
	checkFatal(dec.Decode(&cmap))
	return cmap
}

func writeCounterFile(wMap map[string]*big.Int) error {
	defer un(trace("writeCounterFile"))
	f, err := os.OpenFile(cntrFileName, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0600)

	if err != nil {
		return err
	}

	defer deferClose("Closing tnt2 map file", f.Close)
	e := json.NewEncoder(f)
	e.SetIndent("", "    ")
	return e.Encode(wMap)
}

func main() {
	if encode {
		encrypt()
		cMap[mKey] = tntMachine[len(tntMachine)-1].Index()
		checkFatal(writeCounterFile(cMap))
	} else if decode {
		decrypt()
	}
}
